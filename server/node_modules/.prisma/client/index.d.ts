
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model test
 * 
 */
export type test = $Result.DefaultSelection<Prisma.$testPayload>
/**
 * Model module
 * 
 */
export type module = $Result.DefaultSelection<Prisma.$modulePayload>
/**
 * Model question
 * 
 */
export type question = $Result.DefaultSelection<Prisma.$questionPayload>
/**
 * Model answer
 * 
 */
export type answer = $Result.DefaultSelection<Prisma.$answerPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ReviewPermission: {
  NONE: 'NONE',
  NUMBER_WRONG: 'NUMBER_WRONG',
  QUESTION_NUMBERS: 'QUESTION_NUMBERS',
  ANSWERS: 'ANSWERS'
};

export type ReviewPermission = (typeof ReviewPermission)[keyof typeof ReviewPermission]


export const GradeMethod: {
  LETTER: 'LETTER',
  PASS_FAIL: 'PASS_FAIL',
  POINTS: 'POINTS'
};

export type GradeMethod = (typeof GradeMethod)[keyof typeof GradeMethod]

}

export type ReviewPermission = $Enums.ReviewPermission

export const ReviewPermission: typeof $Enums.ReviewPermission

export type GradeMethod = $Enums.GradeMethod

export const GradeMethod: typeof $Enums.GradeMethod

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tests
 * const tests = await prisma.test.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tests
   * const tests = await prisma.test.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.test`: Exposes CRUD operations for the **test** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tests
    * const tests = await prisma.test.findMany()
    * ```
    */
  get test(): Prisma.testDelegate<ExtArgs>;

  /**
   * `prisma.module`: Exposes CRUD operations for the **module** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Modules
    * const modules = await prisma.module.findMany()
    * ```
    */
  get module(): Prisma.moduleDelegate<ExtArgs>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.questionDelegate<ExtArgs>;

  /**
   * `prisma.answer`: Exposes CRUD operations for the **answer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Answers
    * const answers = await prisma.answer.findMany()
    * ```
    */
  get answer(): Prisma.answerDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    test: 'test',
    module: 'module',
    question: 'question',
    answer: 'answer'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "test" | "module" | "question" | "answer"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      test: {
        payload: Prisma.$testPayload<ExtArgs>
        fields: Prisma.testFieldRefs
        operations: {
          findUnique: {
            args: Prisma.testFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.testFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testPayload>
          }
          findFirst: {
            args: Prisma.testFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.testFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testPayload>
          }
          findMany: {
            args: Prisma.testFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testPayload>[]
          }
          create: {
            args: Prisma.testCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testPayload>
          }
          createMany: {
            args: Prisma.testCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.testCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testPayload>[]
          }
          delete: {
            args: Prisma.testDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testPayload>
          }
          update: {
            args: Prisma.testUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testPayload>
          }
          deleteMany: {
            args: Prisma.testDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.testUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.testUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$testPayload>
          }
          aggregate: {
            args: Prisma.TestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTest>
          }
          groupBy: {
            args: Prisma.testGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestGroupByOutputType>[]
          }
          count: {
            args: Prisma.testCountArgs<ExtArgs>
            result: $Utils.Optional<TestCountAggregateOutputType> | number
          }
        }
      }
      module: {
        payload: Prisma.$modulePayload<ExtArgs>
        fields: Prisma.moduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.moduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.moduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulePayload>
          }
          findFirst: {
            args: Prisma.moduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.moduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulePayload>
          }
          findMany: {
            args: Prisma.moduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulePayload>[]
          }
          create: {
            args: Prisma.moduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulePayload>
          }
          createMany: {
            args: Prisma.moduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.moduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulePayload>[]
          }
          delete: {
            args: Prisma.moduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulePayload>
          }
          update: {
            args: Prisma.moduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulePayload>
          }
          deleteMany: {
            args: Prisma.moduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.moduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.moduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$modulePayload>
          }
          aggregate: {
            args: Prisma.ModuleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateModule>
          }
          groupBy: {
            args: Prisma.moduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ModuleGroupByOutputType>[]
          }
          count: {
            args: Prisma.moduleCountArgs<ExtArgs>
            result: $Utils.Optional<ModuleCountAggregateOutputType> | number
          }
        }
      }
      question: {
        payload: Prisma.$questionPayload<ExtArgs>
        fields: Prisma.questionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.questionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.questionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          findFirst: {
            args: Prisma.questionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.questionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          findMany: {
            args: Prisma.questionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionPayload>[]
          }
          create: {
            args: Prisma.questionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          createMany: {
            args: Prisma.questionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.questionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionPayload>[]
          }
          delete: {
            args: Prisma.questionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          update: {
            args: Prisma.questionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          deleteMany: {
            args: Prisma.questionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.questionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.questionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.questionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.questionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      answer: {
        payload: Prisma.$answerPayload<ExtArgs>
        fields: Prisma.answerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.answerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.answerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answerPayload>
          }
          findFirst: {
            args: Prisma.answerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.answerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answerPayload>
          }
          findMany: {
            args: Prisma.answerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answerPayload>[]
          }
          create: {
            args: Prisma.answerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answerPayload>
          }
          createMany: {
            args: Prisma.answerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.answerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answerPayload>[]
          }
          delete: {
            args: Prisma.answerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answerPayload>
          }
          update: {
            args: Prisma.answerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answerPayload>
          }
          deleteMany: {
            args: Prisma.answerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.answerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.answerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$answerPayload>
          }
          aggregate: {
            args: Prisma.AnswerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnswer>
          }
          groupBy: {
            args: Prisma.answerGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnswerGroupByOutputType>[]
          }
          count: {
            args: Prisma.answerCountArgs<ExtArgs>
            result: $Utils.Optional<AnswerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TestCountOutputType
   */

  export type TestCountOutputType = {
    modules: number
    answers: number
  }

  export type TestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    modules?: boolean | TestCountOutputTypeCountModulesArgs
    answers?: boolean | TestCountOutputTypeCountAnswersArgs
  }

  // Custom InputTypes
  /**
   * TestCountOutputType without action
   */
  export type TestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCountOutputType
     */
    select?: TestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TestCountOutputType without action
   */
  export type TestCountOutputTypeCountModulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: moduleWhereInput
  }

  /**
   * TestCountOutputType without action
   */
  export type TestCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: answerWhereInput
  }


  /**
   * Count Type ModuleCountOutputType
   */

  export type ModuleCountOutputType = {
    questions: number
  }

  export type ModuleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | ModuleCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes
  /**
   * ModuleCountOutputType without action
   */
  export type ModuleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleCountOutputType
     */
    select?: ModuleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ModuleCountOutputType without action
   */
  export type ModuleCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: questionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model test
   */

  export type AggregateTest = {
    _count: TestCountAggregateOutputType | null
    _avg: TestAvgAggregateOutputType | null
    _sum: TestSumAggregateOutputType | null
    _min: TestMinAggregateOutputType | null
    _max: TestMaxAggregateOutputType | null
  }

  export type TestAvgAggregateOutputType = {
    passing_score: number | null
  }

  export type TestSumAggregateOutputType = {
    passing_score: number | null
  }

  export type TestMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    review_permission: $Enums.ReviewPermission | null
    show_point_weight: boolean | null
    review_point_weight: boolean | null
    allow_early_continue: boolean | null
    results_available: boolean | null
    grade_method: $Enums.GradeMethod | null
    passing_score: number | null
  }

  export type TestMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    review_permission: $Enums.ReviewPermission | null
    show_point_weight: boolean | null
    review_point_weight: boolean | null
    allow_early_continue: boolean | null
    results_available: boolean | null
    grade_method: $Enums.GradeMethod | null
    passing_score: number | null
  }

  export type TestCountAggregateOutputType = {
    id: number
    name: number
    description: number
    review_permission: number
    show_point_weight: number
    review_point_weight: number
    allow_early_continue: number
    results_available: number
    grade_method: number
    passing_score: number
    tickets: number
    _all: number
  }


  export type TestAvgAggregateInputType = {
    passing_score?: true
  }

  export type TestSumAggregateInputType = {
    passing_score?: true
  }

  export type TestMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    review_permission?: true
    show_point_weight?: true
    review_point_weight?: true
    allow_early_continue?: true
    results_available?: true
    grade_method?: true
    passing_score?: true
  }

  export type TestMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    review_permission?: true
    show_point_weight?: true
    review_point_weight?: true
    allow_early_continue?: true
    results_available?: true
    grade_method?: true
    passing_score?: true
  }

  export type TestCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    review_permission?: true
    show_point_weight?: true
    review_point_weight?: true
    allow_early_continue?: true
    results_available?: true
    grade_method?: true
    passing_score?: true
    tickets?: true
    _all?: true
  }

  export type TestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which test to aggregate.
     */
    where?: testWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tests to fetch.
     */
    orderBy?: testOrderByWithRelationInput | testOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: testWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tests
    **/
    _count?: true | TestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestMaxAggregateInputType
  }

  export type GetTestAggregateType<T extends TestAggregateArgs> = {
        [P in keyof T & keyof AggregateTest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTest[P]>
      : GetScalarType<T[P], AggregateTest[P]>
  }




  export type testGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: testWhereInput
    orderBy?: testOrderByWithAggregationInput | testOrderByWithAggregationInput[]
    by: TestScalarFieldEnum[] | TestScalarFieldEnum
    having?: testScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestCountAggregateInputType | true
    _avg?: TestAvgAggregateInputType
    _sum?: TestSumAggregateInputType
    _min?: TestMinAggregateInputType
    _max?: TestMaxAggregateInputType
  }

  export type TestGroupByOutputType = {
    id: string
    name: string
    description: string
    review_permission: $Enums.ReviewPermission
    show_point_weight: boolean
    review_point_weight: boolean
    allow_early_continue: boolean
    results_available: boolean
    grade_method: $Enums.GradeMethod
    passing_score: number
    tickets: string[]
    _count: TestCountAggregateOutputType | null
    _avg: TestAvgAggregateOutputType | null
    _sum: TestSumAggregateOutputType | null
    _min: TestMinAggregateOutputType | null
    _max: TestMaxAggregateOutputType | null
  }

  type GetTestGroupByPayload<T extends testGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestGroupByOutputType[P]>
            : GetScalarType<T[P], TestGroupByOutputType[P]>
        }
      >
    >


  export type testSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    review_permission?: boolean
    show_point_weight?: boolean
    review_point_weight?: boolean
    allow_early_continue?: boolean
    results_available?: boolean
    grade_method?: boolean
    passing_score?: boolean
    tickets?: boolean
    modules?: boolean | test$modulesArgs<ExtArgs>
    answers?: boolean | test$answersArgs<ExtArgs>
    _count?: boolean | TestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["test"]>

  export type testSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    review_permission?: boolean
    show_point_weight?: boolean
    review_point_weight?: boolean
    allow_early_continue?: boolean
    results_available?: boolean
    grade_method?: boolean
    passing_score?: boolean
    tickets?: boolean
  }, ExtArgs["result"]["test"]>

  export type testSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    review_permission?: boolean
    show_point_weight?: boolean
    review_point_weight?: boolean
    allow_early_continue?: boolean
    results_available?: boolean
    grade_method?: boolean
    passing_score?: boolean
    tickets?: boolean
  }

  export type testInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    modules?: boolean | test$modulesArgs<ExtArgs>
    answers?: boolean | test$answersArgs<ExtArgs>
    _count?: boolean | TestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type testIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $testPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "test"
    objects: {
      modules: Prisma.$modulePayload<ExtArgs>[]
      answers: Prisma.$answerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      review_permission: $Enums.ReviewPermission
      show_point_weight: boolean
      review_point_weight: boolean
      allow_early_continue: boolean
      results_available: boolean
      grade_method: $Enums.GradeMethod
      passing_score: number
      tickets: string[]
    }, ExtArgs["result"]["test"]>
    composites: {}
  }

  type testGetPayload<S extends boolean | null | undefined | testDefaultArgs> = $Result.GetResult<Prisma.$testPayload, S>

  type testCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<testFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TestCountAggregateInputType | true
    }

  export interface testDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['test'], meta: { name: 'test' } }
    /**
     * Find zero or one Test that matches the filter.
     * @param {testFindUniqueArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends testFindUniqueArgs>(args: SelectSubset<T, testFindUniqueArgs<ExtArgs>>): Prisma__testClient<$Result.GetResult<Prisma.$testPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Test that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {testFindUniqueOrThrowArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends testFindUniqueOrThrowArgs>(args: SelectSubset<T, testFindUniqueOrThrowArgs<ExtArgs>>): Prisma__testClient<$Result.GetResult<Prisma.$testPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Test that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testFindFirstArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends testFindFirstArgs>(args?: SelectSubset<T, testFindFirstArgs<ExtArgs>>): Prisma__testClient<$Result.GetResult<Prisma.$testPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Test that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testFindFirstOrThrowArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends testFindFirstOrThrowArgs>(args?: SelectSubset<T, testFindFirstOrThrowArgs<ExtArgs>>): Prisma__testClient<$Result.GetResult<Prisma.$testPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tests
     * const tests = await prisma.test.findMany()
     * 
     * // Get first 10 Tests
     * const tests = await prisma.test.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testWithIdOnly = await prisma.test.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends testFindManyArgs>(args?: SelectSubset<T, testFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$testPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Test.
     * @param {testCreateArgs} args - Arguments to create a Test.
     * @example
     * // Create one Test
     * const Test = await prisma.test.create({
     *   data: {
     *     // ... data to create a Test
     *   }
     * })
     * 
     */
    create<T extends testCreateArgs>(args: SelectSubset<T, testCreateArgs<ExtArgs>>): Prisma__testClient<$Result.GetResult<Prisma.$testPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tests.
     * @param {testCreateManyArgs} args - Arguments to create many Tests.
     * @example
     * // Create many Tests
     * const test = await prisma.test.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends testCreateManyArgs>(args?: SelectSubset<T, testCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tests and returns the data saved in the database.
     * @param {testCreateManyAndReturnArgs} args - Arguments to create many Tests.
     * @example
     * // Create many Tests
     * const test = await prisma.test.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tests and only return the `id`
     * const testWithIdOnly = await prisma.test.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends testCreateManyAndReturnArgs>(args?: SelectSubset<T, testCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$testPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Test.
     * @param {testDeleteArgs} args - Arguments to delete one Test.
     * @example
     * // Delete one Test
     * const Test = await prisma.test.delete({
     *   where: {
     *     // ... filter to delete one Test
     *   }
     * })
     * 
     */
    delete<T extends testDeleteArgs>(args: SelectSubset<T, testDeleteArgs<ExtArgs>>): Prisma__testClient<$Result.GetResult<Prisma.$testPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Test.
     * @param {testUpdateArgs} args - Arguments to update one Test.
     * @example
     * // Update one Test
     * const test = await prisma.test.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends testUpdateArgs>(args: SelectSubset<T, testUpdateArgs<ExtArgs>>): Prisma__testClient<$Result.GetResult<Prisma.$testPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tests.
     * @param {testDeleteManyArgs} args - Arguments to filter Tests to delete.
     * @example
     * // Delete a few Tests
     * const { count } = await prisma.test.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends testDeleteManyArgs>(args?: SelectSubset<T, testDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tests
     * const test = await prisma.test.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends testUpdateManyArgs>(args: SelectSubset<T, testUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Test.
     * @param {testUpsertArgs} args - Arguments to update or create a Test.
     * @example
     * // Update or create a Test
     * const test = await prisma.test.upsert({
     *   create: {
     *     // ... data to create a Test
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Test we want to update
     *   }
     * })
     */
    upsert<T extends testUpsertArgs>(args: SelectSubset<T, testUpsertArgs<ExtArgs>>): Prisma__testClient<$Result.GetResult<Prisma.$testPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testCountArgs} args - Arguments to filter Tests to count.
     * @example
     * // Count the number of Tests
     * const count = await prisma.test.count({
     *   where: {
     *     // ... the filter for the Tests we want to count
     *   }
     * })
    **/
    count<T extends testCountArgs>(
      args?: Subset<T, testCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Test.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestAggregateArgs>(args: Subset<T, TestAggregateArgs>): Prisma.PrismaPromise<GetTestAggregateType<T>>

    /**
     * Group by Test.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends testGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: testGroupByArgs['orderBy'] }
        : { orderBy?: testGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, testGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the test model
   */
  readonly fields: testFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for test.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__testClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    modules<T extends test$modulesArgs<ExtArgs> = {}>(args?: Subset<T, test$modulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$modulePayload<ExtArgs>, T, "findMany"> | Null>
    answers<T extends test$answersArgs<ExtArgs> = {}>(args?: Subset<T, test$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$answerPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the test model
   */ 
  interface testFieldRefs {
    readonly id: FieldRef<"test", 'String'>
    readonly name: FieldRef<"test", 'String'>
    readonly description: FieldRef<"test", 'String'>
    readonly review_permission: FieldRef<"test", 'ReviewPermission'>
    readonly show_point_weight: FieldRef<"test", 'Boolean'>
    readonly review_point_weight: FieldRef<"test", 'Boolean'>
    readonly allow_early_continue: FieldRef<"test", 'Boolean'>
    readonly results_available: FieldRef<"test", 'Boolean'>
    readonly grade_method: FieldRef<"test", 'GradeMethod'>
    readonly passing_score: FieldRef<"test", 'Int'>
    readonly tickets: FieldRef<"test", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * test findUnique
   */
  export type testFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the test
     */
    select?: testSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testInclude<ExtArgs> | null
    /**
     * Filter, which test to fetch.
     */
    where: testWhereUniqueInput
  }

  /**
   * test findUniqueOrThrow
   */
  export type testFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the test
     */
    select?: testSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testInclude<ExtArgs> | null
    /**
     * Filter, which test to fetch.
     */
    where: testWhereUniqueInput
  }

  /**
   * test findFirst
   */
  export type testFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the test
     */
    select?: testSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testInclude<ExtArgs> | null
    /**
     * Filter, which test to fetch.
     */
    where?: testWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tests to fetch.
     */
    orderBy?: testOrderByWithRelationInput | testOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tests.
     */
    cursor?: testWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tests.
     */
    distinct?: TestScalarFieldEnum | TestScalarFieldEnum[]
  }

  /**
   * test findFirstOrThrow
   */
  export type testFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the test
     */
    select?: testSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testInclude<ExtArgs> | null
    /**
     * Filter, which test to fetch.
     */
    where?: testWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tests to fetch.
     */
    orderBy?: testOrderByWithRelationInput | testOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tests.
     */
    cursor?: testWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tests.
     */
    distinct?: TestScalarFieldEnum | TestScalarFieldEnum[]
  }

  /**
   * test findMany
   */
  export type testFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the test
     */
    select?: testSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testInclude<ExtArgs> | null
    /**
     * Filter, which tests to fetch.
     */
    where?: testWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tests to fetch.
     */
    orderBy?: testOrderByWithRelationInput | testOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tests.
     */
    cursor?: testWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tests.
     */
    skip?: number
    distinct?: TestScalarFieldEnum | TestScalarFieldEnum[]
  }

  /**
   * test create
   */
  export type testCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the test
     */
    select?: testSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testInclude<ExtArgs> | null
    /**
     * The data needed to create a test.
     */
    data: XOR<testCreateInput, testUncheckedCreateInput>
  }

  /**
   * test createMany
   */
  export type testCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tests.
     */
    data: testCreateManyInput | testCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * test createManyAndReturn
   */
  export type testCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the test
     */
    select?: testSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many tests.
     */
    data: testCreateManyInput | testCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * test update
   */
  export type testUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the test
     */
    select?: testSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testInclude<ExtArgs> | null
    /**
     * The data needed to update a test.
     */
    data: XOR<testUpdateInput, testUncheckedUpdateInput>
    /**
     * Choose, which test to update.
     */
    where: testWhereUniqueInput
  }

  /**
   * test updateMany
   */
  export type testUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tests.
     */
    data: XOR<testUpdateManyMutationInput, testUncheckedUpdateManyInput>
    /**
     * Filter which tests to update
     */
    where?: testWhereInput
  }

  /**
   * test upsert
   */
  export type testUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the test
     */
    select?: testSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testInclude<ExtArgs> | null
    /**
     * The filter to search for the test to update in case it exists.
     */
    where: testWhereUniqueInput
    /**
     * In case the test found by the `where` argument doesn't exist, create a new test with this data.
     */
    create: XOR<testCreateInput, testUncheckedCreateInput>
    /**
     * In case the test was found with the provided `where` argument, update it with this data.
     */
    update: XOR<testUpdateInput, testUncheckedUpdateInput>
  }

  /**
   * test delete
   */
  export type testDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the test
     */
    select?: testSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testInclude<ExtArgs> | null
    /**
     * Filter which test to delete.
     */
    where: testWhereUniqueInput
  }

  /**
   * test deleteMany
   */
  export type testDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tests to delete
     */
    where?: testWhereInput
  }

  /**
   * test.modules
   */
  export type test$modulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the module
     */
    select?: moduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moduleInclude<ExtArgs> | null
    where?: moduleWhereInput
    orderBy?: moduleOrderByWithRelationInput | moduleOrderByWithRelationInput[]
    cursor?: moduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ModuleScalarFieldEnum | ModuleScalarFieldEnum[]
  }

  /**
   * test.answers
   */
  export type test$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answer
     */
    select?: answerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answerInclude<ExtArgs> | null
    where?: answerWhereInput
    orderBy?: answerOrderByWithRelationInput | answerOrderByWithRelationInput[]
    cursor?: answerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnswerScalarFieldEnum | AnswerScalarFieldEnum[]
  }

  /**
   * test without action
   */
  export type testDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the test
     */
    select?: testSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: testInclude<ExtArgs> | null
  }


  /**
   * Model module
   */

  export type AggregateModule = {
    _count: ModuleCountAggregateOutputType | null
    _avg: ModuleAvgAggregateOutputType | null
    _sum: ModuleSumAggregateOutputType | null
    _min: ModuleMinAggregateOutputType | null
    _max: ModuleMaxAggregateOutputType | null
  }

  export type ModuleAvgAggregateOutputType = {
    id: number | null
    number: number | null
    time: number | null
  }

  export type ModuleSumAggregateOutputType = {
    id: number | null
    number: number | null
    time: number | null
  }

  export type ModuleMinAggregateOutputType = {
    id: number | null
    number: number | null
    name: string | null
    test_id: string | null
    reference_image: string | null
    time: number | null
  }

  export type ModuleMaxAggregateOutputType = {
    id: number | null
    number: number | null
    name: string | null
    test_id: string | null
    reference_image: string | null
    time: number | null
  }

  export type ModuleCountAggregateOutputType = {
    id: number
    number: number
    name: number
    test_id: number
    reference_image: number
    time: number
    _all: number
  }


  export type ModuleAvgAggregateInputType = {
    id?: true
    number?: true
    time?: true
  }

  export type ModuleSumAggregateInputType = {
    id?: true
    number?: true
    time?: true
  }

  export type ModuleMinAggregateInputType = {
    id?: true
    number?: true
    name?: true
    test_id?: true
    reference_image?: true
    time?: true
  }

  export type ModuleMaxAggregateInputType = {
    id?: true
    number?: true
    name?: true
    test_id?: true
    reference_image?: true
    time?: true
  }

  export type ModuleCountAggregateInputType = {
    id?: true
    number?: true
    name?: true
    test_id?: true
    reference_image?: true
    time?: true
    _all?: true
  }

  export type ModuleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which module to aggregate.
     */
    where?: moduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of modules to fetch.
     */
    orderBy?: moduleOrderByWithRelationInput | moduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: moduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` modules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` modules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned modules
    **/
    _count?: true | ModuleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ModuleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ModuleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ModuleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ModuleMaxAggregateInputType
  }

  export type GetModuleAggregateType<T extends ModuleAggregateArgs> = {
        [P in keyof T & keyof AggregateModule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateModule[P]>
      : GetScalarType<T[P], AggregateModule[P]>
  }




  export type moduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: moduleWhereInput
    orderBy?: moduleOrderByWithAggregationInput | moduleOrderByWithAggregationInput[]
    by: ModuleScalarFieldEnum[] | ModuleScalarFieldEnum
    having?: moduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ModuleCountAggregateInputType | true
    _avg?: ModuleAvgAggregateInputType
    _sum?: ModuleSumAggregateInputType
    _min?: ModuleMinAggregateInputType
    _max?: ModuleMaxAggregateInputType
  }

  export type ModuleGroupByOutputType = {
    id: number
    number: number
    name: string
    test_id: string
    reference_image: string | null
    time: number
    _count: ModuleCountAggregateOutputType | null
    _avg: ModuleAvgAggregateOutputType | null
    _sum: ModuleSumAggregateOutputType | null
    _min: ModuleMinAggregateOutputType | null
    _max: ModuleMaxAggregateOutputType | null
  }

  type GetModuleGroupByPayload<T extends moduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ModuleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ModuleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ModuleGroupByOutputType[P]>
            : GetScalarType<T[P], ModuleGroupByOutputType[P]>
        }
      >
    >


  export type moduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    name?: boolean
    test_id?: boolean
    reference_image?: boolean
    time?: boolean
    questions?: boolean | module$questionsArgs<ExtArgs>
    test?: boolean | testDefaultArgs<ExtArgs>
    _count?: boolean | ModuleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["module"]>

  export type moduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    name?: boolean
    test_id?: boolean
    reference_image?: boolean
    time?: boolean
    test?: boolean | testDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["module"]>

  export type moduleSelectScalar = {
    id?: boolean
    number?: boolean
    name?: boolean
    test_id?: boolean
    reference_image?: boolean
    time?: boolean
  }

  export type moduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | module$questionsArgs<ExtArgs>
    test?: boolean | testDefaultArgs<ExtArgs>
    _count?: boolean | ModuleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type moduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | testDefaultArgs<ExtArgs>
  }

  export type $modulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "module"
    objects: {
      questions: Prisma.$questionPayload<ExtArgs>[]
      test: Prisma.$testPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      number: number
      name: string
      test_id: string
      reference_image: string | null
      time: number
    }, ExtArgs["result"]["module"]>
    composites: {}
  }

  type moduleGetPayload<S extends boolean | null | undefined | moduleDefaultArgs> = $Result.GetResult<Prisma.$modulePayload, S>

  type moduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<moduleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ModuleCountAggregateInputType | true
    }

  export interface moduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['module'], meta: { name: 'module' } }
    /**
     * Find zero or one Module that matches the filter.
     * @param {moduleFindUniqueArgs} args - Arguments to find a Module
     * @example
     * // Get one Module
     * const module = await prisma.module.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends moduleFindUniqueArgs>(args: SelectSubset<T, moduleFindUniqueArgs<ExtArgs>>): Prisma__moduleClient<$Result.GetResult<Prisma.$modulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Module that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {moduleFindUniqueOrThrowArgs} args - Arguments to find a Module
     * @example
     * // Get one Module
     * const module = await prisma.module.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends moduleFindUniqueOrThrowArgs>(args: SelectSubset<T, moduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__moduleClient<$Result.GetResult<Prisma.$modulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Module that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moduleFindFirstArgs} args - Arguments to find a Module
     * @example
     * // Get one Module
     * const module = await prisma.module.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends moduleFindFirstArgs>(args?: SelectSubset<T, moduleFindFirstArgs<ExtArgs>>): Prisma__moduleClient<$Result.GetResult<Prisma.$modulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Module that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moduleFindFirstOrThrowArgs} args - Arguments to find a Module
     * @example
     * // Get one Module
     * const module = await prisma.module.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends moduleFindFirstOrThrowArgs>(args?: SelectSubset<T, moduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__moduleClient<$Result.GetResult<Prisma.$modulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Modules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Modules
     * const modules = await prisma.module.findMany()
     * 
     * // Get first 10 Modules
     * const modules = await prisma.module.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const moduleWithIdOnly = await prisma.module.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends moduleFindManyArgs>(args?: SelectSubset<T, moduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$modulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Module.
     * @param {moduleCreateArgs} args - Arguments to create a Module.
     * @example
     * // Create one Module
     * const Module = await prisma.module.create({
     *   data: {
     *     // ... data to create a Module
     *   }
     * })
     * 
     */
    create<T extends moduleCreateArgs>(args: SelectSubset<T, moduleCreateArgs<ExtArgs>>): Prisma__moduleClient<$Result.GetResult<Prisma.$modulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Modules.
     * @param {moduleCreateManyArgs} args - Arguments to create many Modules.
     * @example
     * // Create many Modules
     * const module = await prisma.module.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends moduleCreateManyArgs>(args?: SelectSubset<T, moduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Modules and returns the data saved in the database.
     * @param {moduleCreateManyAndReturnArgs} args - Arguments to create many Modules.
     * @example
     * // Create many Modules
     * const module = await prisma.module.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Modules and only return the `id`
     * const moduleWithIdOnly = await prisma.module.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends moduleCreateManyAndReturnArgs>(args?: SelectSubset<T, moduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$modulePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Module.
     * @param {moduleDeleteArgs} args - Arguments to delete one Module.
     * @example
     * // Delete one Module
     * const Module = await prisma.module.delete({
     *   where: {
     *     // ... filter to delete one Module
     *   }
     * })
     * 
     */
    delete<T extends moduleDeleteArgs>(args: SelectSubset<T, moduleDeleteArgs<ExtArgs>>): Prisma__moduleClient<$Result.GetResult<Prisma.$modulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Module.
     * @param {moduleUpdateArgs} args - Arguments to update one Module.
     * @example
     * // Update one Module
     * const module = await prisma.module.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends moduleUpdateArgs>(args: SelectSubset<T, moduleUpdateArgs<ExtArgs>>): Prisma__moduleClient<$Result.GetResult<Prisma.$modulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Modules.
     * @param {moduleDeleteManyArgs} args - Arguments to filter Modules to delete.
     * @example
     * // Delete a few Modules
     * const { count } = await prisma.module.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends moduleDeleteManyArgs>(args?: SelectSubset<T, moduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Modules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Modules
     * const module = await prisma.module.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends moduleUpdateManyArgs>(args: SelectSubset<T, moduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Module.
     * @param {moduleUpsertArgs} args - Arguments to update or create a Module.
     * @example
     * // Update or create a Module
     * const module = await prisma.module.upsert({
     *   create: {
     *     // ... data to create a Module
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Module we want to update
     *   }
     * })
     */
    upsert<T extends moduleUpsertArgs>(args: SelectSubset<T, moduleUpsertArgs<ExtArgs>>): Prisma__moduleClient<$Result.GetResult<Prisma.$modulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Modules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moduleCountArgs} args - Arguments to filter Modules to count.
     * @example
     * // Count the number of Modules
     * const count = await prisma.module.count({
     *   where: {
     *     // ... the filter for the Modules we want to count
     *   }
     * })
    **/
    count<T extends moduleCountArgs>(
      args?: Subset<T, moduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ModuleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Module.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ModuleAggregateArgs>(args: Subset<T, ModuleAggregateArgs>): Prisma.PrismaPromise<GetModuleAggregateType<T>>

    /**
     * Group by Module.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {moduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends moduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: moduleGroupByArgs['orderBy'] }
        : { orderBy?: moduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, moduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModuleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the module model
   */
  readonly fields: moduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for module.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__moduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questions<T extends module$questionsArgs<ExtArgs> = {}>(args?: Subset<T, module$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, "findMany"> | Null>
    test<T extends testDefaultArgs<ExtArgs> = {}>(args?: Subset<T, testDefaultArgs<ExtArgs>>): Prisma__testClient<$Result.GetResult<Prisma.$testPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the module model
   */ 
  interface moduleFieldRefs {
    readonly id: FieldRef<"module", 'Int'>
    readonly number: FieldRef<"module", 'Int'>
    readonly name: FieldRef<"module", 'String'>
    readonly test_id: FieldRef<"module", 'String'>
    readonly reference_image: FieldRef<"module", 'String'>
    readonly time: FieldRef<"module", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * module findUnique
   */
  export type moduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the module
     */
    select?: moduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moduleInclude<ExtArgs> | null
    /**
     * Filter, which module to fetch.
     */
    where: moduleWhereUniqueInput
  }

  /**
   * module findUniqueOrThrow
   */
  export type moduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the module
     */
    select?: moduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moduleInclude<ExtArgs> | null
    /**
     * Filter, which module to fetch.
     */
    where: moduleWhereUniqueInput
  }

  /**
   * module findFirst
   */
  export type moduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the module
     */
    select?: moduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moduleInclude<ExtArgs> | null
    /**
     * Filter, which module to fetch.
     */
    where?: moduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of modules to fetch.
     */
    orderBy?: moduleOrderByWithRelationInput | moduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for modules.
     */
    cursor?: moduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` modules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` modules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of modules.
     */
    distinct?: ModuleScalarFieldEnum | ModuleScalarFieldEnum[]
  }

  /**
   * module findFirstOrThrow
   */
  export type moduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the module
     */
    select?: moduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moduleInclude<ExtArgs> | null
    /**
     * Filter, which module to fetch.
     */
    where?: moduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of modules to fetch.
     */
    orderBy?: moduleOrderByWithRelationInput | moduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for modules.
     */
    cursor?: moduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` modules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` modules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of modules.
     */
    distinct?: ModuleScalarFieldEnum | ModuleScalarFieldEnum[]
  }

  /**
   * module findMany
   */
  export type moduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the module
     */
    select?: moduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moduleInclude<ExtArgs> | null
    /**
     * Filter, which modules to fetch.
     */
    where?: moduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of modules to fetch.
     */
    orderBy?: moduleOrderByWithRelationInput | moduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing modules.
     */
    cursor?: moduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` modules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` modules.
     */
    skip?: number
    distinct?: ModuleScalarFieldEnum | ModuleScalarFieldEnum[]
  }

  /**
   * module create
   */
  export type moduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the module
     */
    select?: moduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moduleInclude<ExtArgs> | null
    /**
     * The data needed to create a module.
     */
    data: XOR<moduleCreateInput, moduleUncheckedCreateInput>
  }

  /**
   * module createMany
   */
  export type moduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many modules.
     */
    data: moduleCreateManyInput | moduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * module createManyAndReturn
   */
  export type moduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the module
     */
    select?: moduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many modules.
     */
    data: moduleCreateManyInput | moduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * module update
   */
  export type moduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the module
     */
    select?: moduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moduleInclude<ExtArgs> | null
    /**
     * The data needed to update a module.
     */
    data: XOR<moduleUpdateInput, moduleUncheckedUpdateInput>
    /**
     * Choose, which module to update.
     */
    where: moduleWhereUniqueInput
  }

  /**
   * module updateMany
   */
  export type moduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update modules.
     */
    data: XOR<moduleUpdateManyMutationInput, moduleUncheckedUpdateManyInput>
    /**
     * Filter which modules to update
     */
    where?: moduleWhereInput
  }

  /**
   * module upsert
   */
  export type moduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the module
     */
    select?: moduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moduleInclude<ExtArgs> | null
    /**
     * The filter to search for the module to update in case it exists.
     */
    where: moduleWhereUniqueInput
    /**
     * In case the module found by the `where` argument doesn't exist, create a new module with this data.
     */
    create: XOR<moduleCreateInput, moduleUncheckedCreateInput>
    /**
     * In case the module was found with the provided `where` argument, update it with this data.
     */
    update: XOR<moduleUpdateInput, moduleUncheckedUpdateInput>
  }

  /**
   * module delete
   */
  export type moduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the module
     */
    select?: moduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moduleInclude<ExtArgs> | null
    /**
     * Filter which module to delete.
     */
    where: moduleWhereUniqueInput
  }

  /**
   * module deleteMany
   */
  export type moduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which modules to delete
     */
    where?: moduleWhereInput
  }

  /**
   * module.questions
   */
  export type module$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionInclude<ExtArgs> | null
    where?: questionWhereInput
    orderBy?: questionOrderByWithRelationInput | questionOrderByWithRelationInput[]
    cursor?: questionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * module without action
   */
  export type moduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the module
     */
    select?: moduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: moduleInclude<ExtArgs> | null
  }


  /**
   * Model question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    number: number | null
    points: number | null
    answer: number | null
    module_id: number | null
  }

  export type QuestionSumAggregateOutputType = {
    number: number | null
    points: number | null
    answer: number | null
    module_id: number | null
  }

  export type QuestionMinAggregateOutputType = {
    number: number | null
    question: string | null
    context: string | null
    points: number | null
    answer: number | null
    explanation: string | null
    module_id: number | null
  }

  export type QuestionMaxAggregateOutputType = {
    number: number | null
    question: string | null
    context: string | null
    points: number | null
    answer: number | null
    explanation: string | null
    module_id: number | null
  }

  export type QuestionCountAggregateOutputType = {
    number: number
    question: number
    context: number
    points: number
    choices: number
    answer: number
    explanation: number
    module_id: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    number?: true
    points?: true
    answer?: true
    module_id?: true
  }

  export type QuestionSumAggregateInputType = {
    number?: true
    points?: true
    answer?: true
    module_id?: true
  }

  export type QuestionMinAggregateInputType = {
    number?: true
    question?: true
    context?: true
    points?: true
    answer?: true
    explanation?: true
    module_id?: true
  }

  export type QuestionMaxAggregateInputType = {
    number?: true
    question?: true
    context?: true
    points?: true
    answer?: true
    explanation?: true
    module_id?: true
  }

  export type QuestionCountAggregateInputType = {
    number?: true
    question?: true
    context?: true
    points?: true
    choices?: true
    answer?: true
    explanation?: true
    module_id?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which question to aggregate.
     */
    where?: questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionOrderByWithRelationInput | questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type questionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: questionWhereInput
    orderBy?: questionOrderByWithAggregationInput | questionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: questionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    number: number
    question: string
    context: string | null
    points: number
    choices: string[]
    answer: number
    explanation: string | null
    module_id: number
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends questionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type questionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    number?: boolean
    question?: boolean
    context?: boolean
    points?: boolean
    choices?: boolean
    answer?: boolean
    explanation?: boolean
    module_id?: boolean
    module?: boolean | moduleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type questionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    number?: boolean
    question?: boolean
    context?: boolean
    points?: boolean
    choices?: boolean
    answer?: boolean
    explanation?: boolean
    module_id?: boolean
    module?: boolean | moduleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type questionSelectScalar = {
    number?: boolean
    question?: boolean
    context?: boolean
    points?: boolean
    choices?: boolean
    answer?: boolean
    explanation?: boolean
    module_id?: boolean
  }

  export type questionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    module?: boolean | moduleDefaultArgs<ExtArgs>
  }
  export type questionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    module?: boolean | moduleDefaultArgs<ExtArgs>
  }

  export type $questionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "question"
    objects: {
      module: Prisma.$modulePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      number: number
      question: string
      context: string | null
      points: number
      choices: string[]
      answer: number
      explanation: string | null
      module_id: number
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type questionGetPayload<S extends boolean | null | undefined | questionDefaultArgs> = $Result.GetResult<Prisma.$questionPayload, S>

  type questionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<questionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface questionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['question'], meta: { name: 'question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {questionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends questionFindUniqueArgs>(args: SelectSubset<T, questionFindUniqueArgs<ExtArgs>>): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {questionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends questionFindUniqueOrThrowArgs>(args: SelectSubset<T, questionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends questionFindFirstArgs>(args?: SelectSubset<T, questionFindFirstArgs<ExtArgs>>): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends questionFindFirstOrThrowArgs>(args?: SelectSubset<T, questionFindFirstOrThrowArgs<ExtArgs>>): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `number`
     * const questionWithNumberOnly = await prisma.question.findMany({ select: { number: true } })
     * 
     */
    findMany<T extends questionFindManyArgs>(args?: SelectSubset<T, questionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Question.
     * @param {questionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends questionCreateArgs>(args: SelectSubset<T, questionCreateArgs<ExtArgs>>): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Questions.
     * @param {questionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends questionCreateManyArgs>(args?: SelectSubset<T, questionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {questionCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `number`
     * const questionWithNumberOnly = await prisma.question.createManyAndReturn({ 
     *   select: { number: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends questionCreateManyAndReturnArgs>(args?: SelectSubset<T, questionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Question.
     * @param {questionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends questionDeleteArgs>(args: SelectSubset<T, questionDeleteArgs<ExtArgs>>): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Question.
     * @param {questionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends questionUpdateArgs>(args: SelectSubset<T, questionUpdateArgs<ExtArgs>>): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Questions.
     * @param {questionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends questionDeleteManyArgs>(args?: SelectSubset<T, questionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends questionUpdateManyArgs>(args: SelectSubset<T, questionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Question.
     * @param {questionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends questionUpsertArgs>(args: SelectSubset<T, questionUpsertArgs<ExtArgs>>): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends questionCountArgs>(
      args?: Subset<T, questionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends questionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: questionGroupByArgs['orderBy'] }
        : { orderBy?: questionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, questionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the question model
   */
  readonly fields: questionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__questionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    module<T extends moduleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, moduleDefaultArgs<ExtArgs>>): Prisma__moduleClient<$Result.GetResult<Prisma.$modulePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the question model
   */ 
  interface questionFieldRefs {
    readonly number: FieldRef<"question", 'Int'>
    readonly question: FieldRef<"question", 'String'>
    readonly context: FieldRef<"question", 'String'>
    readonly points: FieldRef<"question", 'Float'>
    readonly choices: FieldRef<"question", 'String[]'>
    readonly answer: FieldRef<"question", 'Int'>
    readonly explanation: FieldRef<"question", 'String'>
    readonly module_id: FieldRef<"question", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * question findUnique
   */
  export type questionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter, which question to fetch.
     */
    where: questionWhereUniqueInput
  }

  /**
   * question findUniqueOrThrow
   */
  export type questionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter, which question to fetch.
     */
    where: questionWhereUniqueInput
  }

  /**
   * question findFirst
   */
  export type questionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter, which question to fetch.
     */
    where?: questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionOrderByWithRelationInput | questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
     */
    cursor?: questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * question findFirstOrThrow
   */
  export type questionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter, which question to fetch.
     */
    where?: questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionOrderByWithRelationInput | questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
     */
    cursor?: questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * question findMany
   */
  export type questionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionOrderByWithRelationInput | questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing questions.
     */
    cursor?: questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * question create
   */
  export type questionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * The data needed to create a question.
     */
    data: XOR<questionCreateInput, questionUncheckedCreateInput>
  }

  /**
   * question createMany
   */
  export type questionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many questions.
     */
    data: questionCreateManyInput | questionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * question createManyAndReturn
   */
  export type questionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many questions.
     */
    data: questionCreateManyInput | questionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * question update
   */
  export type questionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * The data needed to update a question.
     */
    data: XOR<questionUpdateInput, questionUncheckedUpdateInput>
    /**
     * Choose, which question to update.
     */
    where: questionWhereUniqueInput
  }

  /**
   * question updateMany
   */
  export type questionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update questions.
     */
    data: XOR<questionUpdateManyMutationInput, questionUncheckedUpdateManyInput>
    /**
     * Filter which questions to update
     */
    where?: questionWhereInput
  }

  /**
   * question upsert
   */
  export type questionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * The filter to search for the question to update in case it exists.
     */
    where: questionWhereUniqueInput
    /**
     * In case the question found by the `where` argument doesn't exist, create a new question with this data.
     */
    create: XOR<questionCreateInput, questionUncheckedCreateInput>
    /**
     * In case the question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<questionUpdateInput, questionUncheckedUpdateInput>
  }

  /**
   * question delete
   */
  export type questionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter which question to delete.
     */
    where: questionWhereUniqueInput
  }

  /**
   * question deleteMany
   */
  export type questionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which questions to delete
     */
    where?: questionWhereInput
  }

  /**
   * question without action
   */
  export type questionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: questionInclude<ExtArgs> | null
  }


  /**
   * Model answer
   */

  export type AggregateAnswer = {
    _count: AnswerCountAggregateOutputType | null
    _avg: AnswerAvgAggregateOutputType | null
    _sum: AnswerSumAggregateOutputType | null
    _min: AnswerMinAggregateOutputType | null
    _max: AnswerMaxAggregateOutputType | null
  }

  export type AnswerAvgAggregateOutputType = {
    answers: number | null
    current_module: number | null
  }

  export type AnswerSumAggregateOutputType = {
    answers: number[]
    current_module: number | null
  }

  export type AnswerMinAggregateOutputType = {
    ticket: string | null
    current_module: number | null
    start_module_at: Date | null
    module_answers_received: boolean | null
    invalid: boolean | null
    finished: boolean | null
    test_id: string | null
  }

  export type AnswerMaxAggregateOutputType = {
    ticket: string | null
    current_module: number | null
    start_module_at: Date | null
    module_answers_received: boolean | null
    invalid: boolean | null
    finished: boolean | null
    test_id: string | null
  }

  export type AnswerCountAggregateOutputType = {
    ticket: number
    answers: number
    current_module: number
    start_module_at: number
    module_answers_received: number
    invalid: number
    finished: number
    test_id: number
    _all: number
  }


  export type AnswerAvgAggregateInputType = {
    answers?: true
    current_module?: true
  }

  export type AnswerSumAggregateInputType = {
    answers?: true
    current_module?: true
  }

  export type AnswerMinAggregateInputType = {
    ticket?: true
    current_module?: true
    start_module_at?: true
    module_answers_received?: true
    invalid?: true
    finished?: true
    test_id?: true
  }

  export type AnswerMaxAggregateInputType = {
    ticket?: true
    current_module?: true
    start_module_at?: true
    module_answers_received?: true
    invalid?: true
    finished?: true
    test_id?: true
  }

  export type AnswerCountAggregateInputType = {
    ticket?: true
    answers?: true
    current_module?: true
    start_module_at?: true
    module_answers_received?: true
    invalid?: true
    finished?: true
    test_id?: true
    _all?: true
  }

  export type AnswerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which answer to aggregate.
     */
    where?: answerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of answers to fetch.
     */
    orderBy?: answerOrderByWithRelationInput | answerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: answerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned answers
    **/
    _count?: true | AnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnswerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnswerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnswerMaxAggregateInputType
  }

  export type GetAnswerAggregateType<T extends AnswerAggregateArgs> = {
        [P in keyof T & keyof AggregateAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnswer[P]>
      : GetScalarType<T[P], AggregateAnswer[P]>
  }




  export type answerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: answerWhereInput
    orderBy?: answerOrderByWithAggregationInput | answerOrderByWithAggregationInput[]
    by: AnswerScalarFieldEnum[] | AnswerScalarFieldEnum
    having?: answerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnswerCountAggregateInputType | true
    _avg?: AnswerAvgAggregateInputType
    _sum?: AnswerSumAggregateInputType
    _min?: AnswerMinAggregateInputType
    _max?: AnswerMaxAggregateInputType
  }

  export type AnswerGroupByOutputType = {
    ticket: string
    answers: number[]
    current_module: number
    start_module_at: Date
    module_answers_received: boolean
    invalid: boolean
    finished: boolean
    test_id: string
    _count: AnswerCountAggregateOutputType | null
    _avg: AnswerAvgAggregateOutputType | null
    _sum: AnswerSumAggregateOutputType | null
    _min: AnswerMinAggregateOutputType | null
    _max: AnswerMaxAggregateOutputType | null
  }

  type GetAnswerGroupByPayload<T extends answerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnswerGroupByOutputType[P]>
            : GetScalarType<T[P], AnswerGroupByOutputType[P]>
        }
      >
    >


  export type answerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ticket?: boolean
    answers?: boolean
    current_module?: boolean
    start_module_at?: boolean
    module_answers_received?: boolean
    invalid?: boolean
    finished?: boolean
    test_id?: boolean
    test?: boolean | testDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["answer"]>

  export type answerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ticket?: boolean
    answers?: boolean
    current_module?: boolean
    start_module_at?: boolean
    module_answers_received?: boolean
    invalid?: boolean
    finished?: boolean
    test_id?: boolean
    test?: boolean | testDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["answer"]>

  export type answerSelectScalar = {
    ticket?: boolean
    answers?: boolean
    current_module?: boolean
    start_module_at?: boolean
    module_answers_received?: boolean
    invalid?: boolean
    finished?: boolean
    test_id?: boolean
  }

  export type answerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | testDefaultArgs<ExtArgs>
  }
  export type answerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | testDefaultArgs<ExtArgs>
  }

  export type $answerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "answer"
    objects: {
      test: Prisma.$testPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ticket: string
      answers: number[]
      current_module: number
      start_module_at: Date
      module_answers_received: boolean
      invalid: boolean
      finished: boolean
      test_id: string
    }, ExtArgs["result"]["answer"]>
    composites: {}
  }

  type answerGetPayload<S extends boolean | null | undefined | answerDefaultArgs> = $Result.GetResult<Prisma.$answerPayload, S>

  type answerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<answerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AnswerCountAggregateInputType | true
    }

  export interface answerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['answer'], meta: { name: 'answer' } }
    /**
     * Find zero or one Answer that matches the filter.
     * @param {answerFindUniqueArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends answerFindUniqueArgs>(args: SelectSubset<T, answerFindUniqueArgs<ExtArgs>>): Prisma__answerClient<$Result.GetResult<Prisma.$answerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Answer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {answerFindUniqueOrThrowArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends answerFindUniqueOrThrowArgs>(args: SelectSubset<T, answerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__answerClient<$Result.GetResult<Prisma.$answerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Answer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answerFindFirstArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends answerFindFirstArgs>(args?: SelectSubset<T, answerFindFirstArgs<ExtArgs>>): Prisma__answerClient<$Result.GetResult<Prisma.$answerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Answer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answerFindFirstOrThrowArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends answerFindFirstOrThrowArgs>(args?: SelectSubset<T, answerFindFirstOrThrowArgs<ExtArgs>>): Prisma__answerClient<$Result.GetResult<Prisma.$answerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Answers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Answers
     * const answers = await prisma.answer.findMany()
     * 
     * // Get first 10 Answers
     * const answers = await prisma.answer.findMany({ take: 10 })
     * 
     * // Only select the `ticket`
     * const answerWithTicketOnly = await prisma.answer.findMany({ select: { ticket: true } })
     * 
     */
    findMany<T extends answerFindManyArgs>(args?: SelectSubset<T, answerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$answerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Answer.
     * @param {answerCreateArgs} args - Arguments to create a Answer.
     * @example
     * // Create one Answer
     * const Answer = await prisma.answer.create({
     *   data: {
     *     // ... data to create a Answer
     *   }
     * })
     * 
     */
    create<T extends answerCreateArgs>(args: SelectSubset<T, answerCreateArgs<ExtArgs>>): Prisma__answerClient<$Result.GetResult<Prisma.$answerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Answers.
     * @param {answerCreateManyArgs} args - Arguments to create many Answers.
     * @example
     * // Create many Answers
     * const answer = await prisma.answer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends answerCreateManyArgs>(args?: SelectSubset<T, answerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Answers and returns the data saved in the database.
     * @param {answerCreateManyAndReturnArgs} args - Arguments to create many Answers.
     * @example
     * // Create many Answers
     * const answer = await prisma.answer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Answers and only return the `ticket`
     * const answerWithTicketOnly = await prisma.answer.createManyAndReturn({ 
     *   select: { ticket: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends answerCreateManyAndReturnArgs>(args?: SelectSubset<T, answerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$answerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Answer.
     * @param {answerDeleteArgs} args - Arguments to delete one Answer.
     * @example
     * // Delete one Answer
     * const Answer = await prisma.answer.delete({
     *   where: {
     *     // ... filter to delete one Answer
     *   }
     * })
     * 
     */
    delete<T extends answerDeleteArgs>(args: SelectSubset<T, answerDeleteArgs<ExtArgs>>): Prisma__answerClient<$Result.GetResult<Prisma.$answerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Answer.
     * @param {answerUpdateArgs} args - Arguments to update one Answer.
     * @example
     * // Update one Answer
     * const answer = await prisma.answer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends answerUpdateArgs>(args: SelectSubset<T, answerUpdateArgs<ExtArgs>>): Prisma__answerClient<$Result.GetResult<Prisma.$answerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Answers.
     * @param {answerDeleteManyArgs} args - Arguments to filter Answers to delete.
     * @example
     * // Delete a few Answers
     * const { count } = await prisma.answer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends answerDeleteManyArgs>(args?: SelectSubset<T, answerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Answers
     * const answer = await prisma.answer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends answerUpdateManyArgs>(args: SelectSubset<T, answerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Answer.
     * @param {answerUpsertArgs} args - Arguments to update or create a Answer.
     * @example
     * // Update or create a Answer
     * const answer = await prisma.answer.upsert({
     *   create: {
     *     // ... data to create a Answer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Answer we want to update
     *   }
     * })
     */
    upsert<T extends answerUpsertArgs>(args: SelectSubset<T, answerUpsertArgs<ExtArgs>>): Prisma__answerClient<$Result.GetResult<Prisma.$answerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answerCountArgs} args - Arguments to filter Answers to count.
     * @example
     * // Count the number of Answers
     * const count = await prisma.answer.count({
     *   where: {
     *     // ... the filter for the Answers we want to count
     *   }
     * })
    **/
    count<T extends answerCountArgs>(
      args?: Subset<T, answerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Answer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnswerAggregateArgs>(args: Subset<T, AnswerAggregateArgs>): Prisma.PrismaPromise<GetAnswerAggregateType<T>>

    /**
     * Group by Answer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends answerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: answerGroupByArgs['orderBy'] }
        : { orderBy?: answerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, answerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnswerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the answer model
   */
  readonly fields: answerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for answer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__answerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    test<T extends testDefaultArgs<ExtArgs> = {}>(args?: Subset<T, testDefaultArgs<ExtArgs>>): Prisma__testClient<$Result.GetResult<Prisma.$testPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the answer model
   */ 
  interface answerFieldRefs {
    readonly ticket: FieldRef<"answer", 'String'>
    readonly answers: FieldRef<"answer", 'Int[]'>
    readonly current_module: FieldRef<"answer", 'Int'>
    readonly start_module_at: FieldRef<"answer", 'DateTime'>
    readonly module_answers_received: FieldRef<"answer", 'Boolean'>
    readonly invalid: FieldRef<"answer", 'Boolean'>
    readonly finished: FieldRef<"answer", 'Boolean'>
    readonly test_id: FieldRef<"answer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * answer findUnique
   */
  export type answerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answer
     */
    select?: answerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answerInclude<ExtArgs> | null
    /**
     * Filter, which answer to fetch.
     */
    where: answerWhereUniqueInput
  }

  /**
   * answer findUniqueOrThrow
   */
  export type answerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answer
     */
    select?: answerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answerInclude<ExtArgs> | null
    /**
     * Filter, which answer to fetch.
     */
    where: answerWhereUniqueInput
  }

  /**
   * answer findFirst
   */
  export type answerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answer
     */
    select?: answerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answerInclude<ExtArgs> | null
    /**
     * Filter, which answer to fetch.
     */
    where?: answerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of answers to fetch.
     */
    orderBy?: answerOrderByWithRelationInput | answerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for answers.
     */
    cursor?: answerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of answers.
     */
    distinct?: AnswerScalarFieldEnum | AnswerScalarFieldEnum[]
  }

  /**
   * answer findFirstOrThrow
   */
  export type answerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answer
     */
    select?: answerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answerInclude<ExtArgs> | null
    /**
     * Filter, which answer to fetch.
     */
    where?: answerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of answers to fetch.
     */
    orderBy?: answerOrderByWithRelationInput | answerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for answers.
     */
    cursor?: answerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of answers.
     */
    distinct?: AnswerScalarFieldEnum | AnswerScalarFieldEnum[]
  }

  /**
   * answer findMany
   */
  export type answerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answer
     */
    select?: answerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answerInclude<ExtArgs> | null
    /**
     * Filter, which answers to fetch.
     */
    where?: answerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of answers to fetch.
     */
    orderBy?: answerOrderByWithRelationInput | answerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing answers.
     */
    cursor?: answerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
     */
    skip?: number
    distinct?: AnswerScalarFieldEnum | AnswerScalarFieldEnum[]
  }

  /**
   * answer create
   */
  export type answerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answer
     */
    select?: answerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answerInclude<ExtArgs> | null
    /**
     * The data needed to create a answer.
     */
    data: XOR<answerCreateInput, answerUncheckedCreateInput>
  }

  /**
   * answer createMany
   */
  export type answerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many answers.
     */
    data: answerCreateManyInput | answerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * answer createManyAndReturn
   */
  export type answerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answer
     */
    select?: answerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many answers.
     */
    data: answerCreateManyInput | answerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * answer update
   */
  export type answerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answer
     */
    select?: answerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answerInclude<ExtArgs> | null
    /**
     * The data needed to update a answer.
     */
    data: XOR<answerUpdateInput, answerUncheckedUpdateInput>
    /**
     * Choose, which answer to update.
     */
    where: answerWhereUniqueInput
  }

  /**
   * answer updateMany
   */
  export type answerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update answers.
     */
    data: XOR<answerUpdateManyMutationInput, answerUncheckedUpdateManyInput>
    /**
     * Filter which answers to update
     */
    where?: answerWhereInput
  }

  /**
   * answer upsert
   */
  export type answerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answer
     */
    select?: answerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answerInclude<ExtArgs> | null
    /**
     * The filter to search for the answer to update in case it exists.
     */
    where: answerWhereUniqueInput
    /**
     * In case the answer found by the `where` argument doesn't exist, create a new answer with this data.
     */
    create: XOR<answerCreateInput, answerUncheckedCreateInput>
    /**
     * In case the answer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<answerUpdateInput, answerUncheckedUpdateInput>
  }

  /**
   * answer delete
   */
  export type answerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answer
     */
    select?: answerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answerInclude<ExtArgs> | null
    /**
     * Filter which answer to delete.
     */
    where: answerWhereUniqueInput
  }

  /**
   * answer deleteMany
   */
  export type answerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which answers to delete
     */
    where?: answerWhereInput
  }

  /**
   * answer without action
   */
  export type answerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the answer
     */
    select?: answerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: answerInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TestScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    review_permission: 'review_permission',
    show_point_weight: 'show_point_weight',
    review_point_weight: 'review_point_weight',
    allow_early_continue: 'allow_early_continue',
    results_available: 'results_available',
    grade_method: 'grade_method',
    passing_score: 'passing_score',
    tickets: 'tickets'
  };

  export type TestScalarFieldEnum = (typeof TestScalarFieldEnum)[keyof typeof TestScalarFieldEnum]


  export const ModuleScalarFieldEnum: {
    id: 'id',
    number: 'number',
    name: 'name',
    test_id: 'test_id',
    reference_image: 'reference_image',
    time: 'time'
  };

  export type ModuleScalarFieldEnum = (typeof ModuleScalarFieldEnum)[keyof typeof ModuleScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    number: 'number',
    question: 'question',
    context: 'context',
    points: 'points',
    choices: 'choices',
    answer: 'answer',
    explanation: 'explanation',
    module_id: 'module_id'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const AnswerScalarFieldEnum: {
    ticket: 'ticket',
    answers: 'answers',
    current_module: 'current_module',
    start_module_at: 'start_module_at',
    module_answers_received: 'module_answers_received',
    invalid: 'invalid',
    finished: 'finished',
    test_id: 'test_id'
  };

  export type AnswerScalarFieldEnum = (typeof AnswerScalarFieldEnum)[keyof typeof AnswerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'ReviewPermission'
   */
  export type EnumReviewPermissionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReviewPermission'>
    


  /**
   * Reference to a field of type 'ReviewPermission[]'
   */
  export type ListEnumReviewPermissionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReviewPermission[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'GradeMethod'
   */
  export type EnumGradeMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GradeMethod'>
    


  /**
   * Reference to a field of type 'GradeMethod[]'
   */
  export type ListEnumGradeMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GradeMethod[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type testWhereInput = {
    AND?: testWhereInput | testWhereInput[]
    OR?: testWhereInput[]
    NOT?: testWhereInput | testWhereInput[]
    id?: StringFilter<"test"> | string
    name?: StringFilter<"test"> | string
    description?: StringFilter<"test"> | string
    review_permission?: EnumReviewPermissionFilter<"test"> | $Enums.ReviewPermission
    show_point_weight?: BoolFilter<"test"> | boolean
    review_point_weight?: BoolFilter<"test"> | boolean
    allow_early_continue?: BoolFilter<"test"> | boolean
    results_available?: BoolFilter<"test"> | boolean
    grade_method?: EnumGradeMethodFilter<"test"> | $Enums.GradeMethod
    passing_score?: IntFilter<"test"> | number
    tickets?: StringNullableListFilter<"test">
    modules?: ModuleListRelationFilter
    answers?: AnswerListRelationFilter
  }

  export type testOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    review_permission?: SortOrder
    show_point_weight?: SortOrder
    review_point_weight?: SortOrder
    allow_early_continue?: SortOrder
    results_available?: SortOrder
    grade_method?: SortOrder
    passing_score?: SortOrder
    tickets?: SortOrder
    modules?: moduleOrderByRelationAggregateInput
    answers?: answerOrderByRelationAggregateInput
  }

  export type testWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: testWhereInput | testWhereInput[]
    OR?: testWhereInput[]
    NOT?: testWhereInput | testWhereInput[]
    name?: StringFilter<"test"> | string
    description?: StringFilter<"test"> | string
    review_permission?: EnumReviewPermissionFilter<"test"> | $Enums.ReviewPermission
    show_point_weight?: BoolFilter<"test"> | boolean
    review_point_weight?: BoolFilter<"test"> | boolean
    allow_early_continue?: BoolFilter<"test"> | boolean
    results_available?: BoolFilter<"test"> | boolean
    grade_method?: EnumGradeMethodFilter<"test"> | $Enums.GradeMethod
    passing_score?: IntFilter<"test"> | number
    tickets?: StringNullableListFilter<"test">
    modules?: ModuleListRelationFilter
    answers?: AnswerListRelationFilter
  }, "id">

  export type testOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    review_permission?: SortOrder
    show_point_weight?: SortOrder
    review_point_weight?: SortOrder
    allow_early_continue?: SortOrder
    results_available?: SortOrder
    grade_method?: SortOrder
    passing_score?: SortOrder
    tickets?: SortOrder
    _count?: testCountOrderByAggregateInput
    _avg?: testAvgOrderByAggregateInput
    _max?: testMaxOrderByAggregateInput
    _min?: testMinOrderByAggregateInput
    _sum?: testSumOrderByAggregateInput
  }

  export type testScalarWhereWithAggregatesInput = {
    AND?: testScalarWhereWithAggregatesInput | testScalarWhereWithAggregatesInput[]
    OR?: testScalarWhereWithAggregatesInput[]
    NOT?: testScalarWhereWithAggregatesInput | testScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"test"> | string
    name?: StringWithAggregatesFilter<"test"> | string
    description?: StringWithAggregatesFilter<"test"> | string
    review_permission?: EnumReviewPermissionWithAggregatesFilter<"test"> | $Enums.ReviewPermission
    show_point_weight?: BoolWithAggregatesFilter<"test"> | boolean
    review_point_weight?: BoolWithAggregatesFilter<"test"> | boolean
    allow_early_continue?: BoolWithAggregatesFilter<"test"> | boolean
    results_available?: BoolWithAggregatesFilter<"test"> | boolean
    grade_method?: EnumGradeMethodWithAggregatesFilter<"test"> | $Enums.GradeMethod
    passing_score?: IntWithAggregatesFilter<"test"> | number
    tickets?: StringNullableListFilter<"test">
  }

  export type moduleWhereInput = {
    AND?: moduleWhereInput | moduleWhereInput[]
    OR?: moduleWhereInput[]
    NOT?: moduleWhereInput | moduleWhereInput[]
    id?: IntFilter<"module"> | number
    number?: IntFilter<"module"> | number
    name?: StringFilter<"module"> | string
    test_id?: StringFilter<"module"> | string
    reference_image?: StringNullableFilter<"module"> | string | null
    time?: IntFilter<"module"> | number
    questions?: QuestionListRelationFilter
    test?: XOR<TestRelationFilter, testWhereInput>
  }

  export type moduleOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
    test_id?: SortOrder
    reference_image?: SortOrderInput | SortOrder
    time?: SortOrder
    questions?: questionOrderByRelationAggregateInput
    test?: testOrderByWithRelationInput
  }

  export type moduleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name_test_id?: moduleNameTest_idCompoundUniqueInput
    number_test_id?: moduleNumberTest_idCompoundUniqueInput
    AND?: moduleWhereInput | moduleWhereInput[]
    OR?: moduleWhereInput[]
    NOT?: moduleWhereInput | moduleWhereInput[]
    number?: IntFilter<"module"> | number
    name?: StringFilter<"module"> | string
    test_id?: StringFilter<"module"> | string
    reference_image?: StringNullableFilter<"module"> | string | null
    time?: IntFilter<"module"> | number
    questions?: QuestionListRelationFilter
    test?: XOR<TestRelationFilter, testWhereInput>
  }, "id" | "name_test_id" | "number_test_id">

  export type moduleOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
    test_id?: SortOrder
    reference_image?: SortOrderInput | SortOrder
    time?: SortOrder
    _count?: moduleCountOrderByAggregateInput
    _avg?: moduleAvgOrderByAggregateInput
    _max?: moduleMaxOrderByAggregateInput
    _min?: moduleMinOrderByAggregateInput
    _sum?: moduleSumOrderByAggregateInput
  }

  export type moduleScalarWhereWithAggregatesInput = {
    AND?: moduleScalarWhereWithAggregatesInput | moduleScalarWhereWithAggregatesInput[]
    OR?: moduleScalarWhereWithAggregatesInput[]
    NOT?: moduleScalarWhereWithAggregatesInput | moduleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"module"> | number
    number?: IntWithAggregatesFilter<"module"> | number
    name?: StringWithAggregatesFilter<"module"> | string
    test_id?: StringWithAggregatesFilter<"module"> | string
    reference_image?: StringNullableWithAggregatesFilter<"module"> | string | null
    time?: IntWithAggregatesFilter<"module"> | number
  }

  export type questionWhereInput = {
    AND?: questionWhereInput | questionWhereInput[]
    OR?: questionWhereInput[]
    NOT?: questionWhereInput | questionWhereInput[]
    number?: IntFilter<"question"> | number
    question?: StringFilter<"question"> | string
    context?: StringNullableFilter<"question"> | string | null
    points?: FloatFilter<"question"> | number
    choices?: StringNullableListFilter<"question">
    answer?: IntFilter<"question"> | number
    explanation?: StringNullableFilter<"question"> | string | null
    module_id?: IntFilter<"question"> | number
    module?: XOR<ModuleRelationFilter, moduleWhereInput>
  }

  export type questionOrderByWithRelationInput = {
    number?: SortOrder
    question?: SortOrder
    context?: SortOrderInput | SortOrder
    points?: SortOrder
    choices?: SortOrder
    answer?: SortOrder
    explanation?: SortOrderInput | SortOrder
    module_id?: SortOrder
    module?: moduleOrderByWithRelationInput
  }

  export type questionWhereUniqueInput = Prisma.AtLeast<{
    number_module_id?: questionNumberModule_idCompoundUniqueInput
    AND?: questionWhereInput | questionWhereInput[]
    OR?: questionWhereInput[]
    NOT?: questionWhereInput | questionWhereInput[]
    number?: IntFilter<"question"> | number
    question?: StringFilter<"question"> | string
    context?: StringNullableFilter<"question"> | string | null
    points?: FloatFilter<"question"> | number
    choices?: StringNullableListFilter<"question">
    answer?: IntFilter<"question"> | number
    explanation?: StringNullableFilter<"question"> | string | null
    module_id?: IntFilter<"question"> | number
    module?: XOR<ModuleRelationFilter, moduleWhereInput>
  }, "number_module_id">

  export type questionOrderByWithAggregationInput = {
    number?: SortOrder
    question?: SortOrder
    context?: SortOrderInput | SortOrder
    points?: SortOrder
    choices?: SortOrder
    answer?: SortOrder
    explanation?: SortOrderInput | SortOrder
    module_id?: SortOrder
    _count?: questionCountOrderByAggregateInput
    _avg?: questionAvgOrderByAggregateInput
    _max?: questionMaxOrderByAggregateInput
    _min?: questionMinOrderByAggregateInput
    _sum?: questionSumOrderByAggregateInput
  }

  export type questionScalarWhereWithAggregatesInput = {
    AND?: questionScalarWhereWithAggregatesInput | questionScalarWhereWithAggregatesInput[]
    OR?: questionScalarWhereWithAggregatesInput[]
    NOT?: questionScalarWhereWithAggregatesInput | questionScalarWhereWithAggregatesInput[]
    number?: IntWithAggregatesFilter<"question"> | number
    question?: StringWithAggregatesFilter<"question"> | string
    context?: StringNullableWithAggregatesFilter<"question"> | string | null
    points?: FloatWithAggregatesFilter<"question"> | number
    choices?: StringNullableListFilter<"question">
    answer?: IntWithAggregatesFilter<"question"> | number
    explanation?: StringNullableWithAggregatesFilter<"question"> | string | null
    module_id?: IntWithAggregatesFilter<"question"> | number
  }

  export type answerWhereInput = {
    AND?: answerWhereInput | answerWhereInput[]
    OR?: answerWhereInput[]
    NOT?: answerWhereInput | answerWhereInput[]
    ticket?: StringFilter<"answer"> | string
    answers?: IntNullableListFilter<"answer">
    current_module?: IntFilter<"answer"> | number
    start_module_at?: DateTimeFilter<"answer"> | Date | string
    module_answers_received?: BoolFilter<"answer"> | boolean
    invalid?: BoolFilter<"answer"> | boolean
    finished?: BoolFilter<"answer"> | boolean
    test_id?: StringFilter<"answer"> | string
    test?: XOR<TestRelationFilter, testWhereInput>
  }

  export type answerOrderByWithRelationInput = {
    ticket?: SortOrder
    answers?: SortOrder
    current_module?: SortOrder
    start_module_at?: SortOrder
    module_answers_received?: SortOrder
    invalid?: SortOrder
    finished?: SortOrder
    test_id?: SortOrder
    test?: testOrderByWithRelationInput
  }

  export type answerWhereUniqueInput = Prisma.AtLeast<{
    ticket_test_id?: answerTicketTest_idCompoundUniqueInput
    AND?: answerWhereInput | answerWhereInput[]
    OR?: answerWhereInput[]
    NOT?: answerWhereInput | answerWhereInput[]
    ticket?: StringFilter<"answer"> | string
    answers?: IntNullableListFilter<"answer">
    current_module?: IntFilter<"answer"> | number
    start_module_at?: DateTimeFilter<"answer"> | Date | string
    module_answers_received?: BoolFilter<"answer"> | boolean
    invalid?: BoolFilter<"answer"> | boolean
    finished?: BoolFilter<"answer"> | boolean
    test_id?: StringFilter<"answer"> | string
    test?: XOR<TestRelationFilter, testWhereInput>
  }, "ticket_test_id">

  export type answerOrderByWithAggregationInput = {
    ticket?: SortOrder
    answers?: SortOrder
    current_module?: SortOrder
    start_module_at?: SortOrder
    module_answers_received?: SortOrder
    invalid?: SortOrder
    finished?: SortOrder
    test_id?: SortOrder
    _count?: answerCountOrderByAggregateInput
    _avg?: answerAvgOrderByAggregateInput
    _max?: answerMaxOrderByAggregateInput
    _min?: answerMinOrderByAggregateInput
    _sum?: answerSumOrderByAggregateInput
  }

  export type answerScalarWhereWithAggregatesInput = {
    AND?: answerScalarWhereWithAggregatesInput | answerScalarWhereWithAggregatesInput[]
    OR?: answerScalarWhereWithAggregatesInput[]
    NOT?: answerScalarWhereWithAggregatesInput | answerScalarWhereWithAggregatesInput[]
    ticket?: StringWithAggregatesFilter<"answer"> | string
    answers?: IntNullableListFilter<"answer">
    current_module?: IntWithAggregatesFilter<"answer"> | number
    start_module_at?: DateTimeWithAggregatesFilter<"answer"> | Date | string
    module_answers_received?: BoolWithAggregatesFilter<"answer"> | boolean
    invalid?: BoolWithAggregatesFilter<"answer"> | boolean
    finished?: BoolWithAggregatesFilter<"answer"> | boolean
    test_id?: StringWithAggregatesFilter<"answer"> | string
  }

  export type testCreateInput = {
    id: string
    name: string
    description: string
    review_permission?: $Enums.ReviewPermission
    show_point_weight?: boolean
    review_point_weight?: boolean
    allow_early_continue?: boolean
    results_available?: boolean
    grade_method?: $Enums.GradeMethod
    passing_score?: number
    tickets?: testCreateticketsInput | string[]
    modules?: moduleCreateNestedManyWithoutTestInput
    answers?: answerCreateNestedManyWithoutTestInput
  }

  export type testUncheckedCreateInput = {
    id: string
    name: string
    description: string
    review_permission?: $Enums.ReviewPermission
    show_point_weight?: boolean
    review_point_weight?: boolean
    allow_early_continue?: boolean
    results_available?: boolean
    grade_method?: $Enums.GradeMethod
    passing_score?: number
    tickets?: testCreateticketsInput | string[]
    modules?: moduleUncheckedCreateNestedManyWithoutTestInput
    answers?: answerUncheckedCreateNestedManyWithoutTestInput
  }

  export type testUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    review_permission?: EnumReviewPermissionFieldUpdateOperationsInput | $Enums.ReviewPermission
    show_point_weight?: BoolFieldUpdateOperationsInput | boolean
    review_point_weight?: BoolFieldUpdateOperationsInput | boolean
    allow_early_continue?: BoolFieldUpdateOperationsInput | boolean
    results_available?: BoolFieldUpdateOperationsInput | boolean
    grade_method?: EnumGradeMethodFieldUpdateOperationsInput | $Enums.GradeMethod
    passing_score?: IntFieldUpdateOperationsInput | number
    tickets?: testUpdateticketsInput | string[]
    modules?: moduleUpdateManyWithoutTestNestedInput
    answers?: answerUpdateManyWithoutTestNestedInput
  }

  export type testUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    review_permission?: EnumReviewPermissionFieldUpdateOperationsInput | $Enums.ReviewPermission
    show_point_weight?: BoolFieldUpdateOperationsInput | boolean
    review_point_weight?: BoolFieldUpdateOperationsInput | boolean
    allow_early_continue?: BoolFieldUpdateOperationsInput | boolean
    results_available?: BoolFieldUpdateOperationsInput | boolean
    grade_method?: EnumGradeMethodFieldUpdateOperationsInput | $Enums.GradeMethod
    passing_score?: IntFieldUpdateOperationsInput | number
    tickets?: testUpdateticketsInput | string[]
    modules?: moduleUncheckedUpdateManyWithoutTestNestedInput
    answers?: answerUncheckedUpdateManyWithoutTestNestedInput
  }

  export type testCreateManyInput = {
    id: string
    name: string
    description: string
    review_permission?: $Enums.ReviewPermission
    show_point_weight?: boolean
    review_point_weight?: boolean
    allow_early_continue?: boolean
    results_available?: boolean
    grade_method?: $Enums.GradeMethod
    passing_score?: number
    tickets?: testCreateticketsInput | string[]
  }

  export type testUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    review_permission?: EnumReviewPermissionFieldUpdateOperationsInput | $Enums.ReviewPermission
    show_point_weight?: BoolFieldUpdateOperationsInput | boolean
    review_point_weight?: BoolFieldUpdateOperationsInput | boolean
    allow_early_continue?: BoolFieldUpdateOperationsInput | boolean
    results_available?: BoolFieldUpdateOperationsInput | boolean
    grade_method?: EnumGradeMethodFieldUpdateOperationsInput | $Enums.GradeMethod
    passing_score?: IntFieldUpdateOperationsInput | number
    tickets?: testUpdateticketsInput | string[]
  }

  export type testUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    review_permission?: EnumReviewPermissionFieldUpdateOperationsInput | $Enums.ReviewPermission
    show_point_weight?: BoolFieldUpdateOperationsInput | boolean
    review_point_weight?: BoolFieldUpdateOperationsInput | boolean
    allow_early_continue?: BoolFieldUpdateOperationsInput | boolean
    results_available?: BoolFieldUpdateOperationsInput | boolean
    grade_method?: EnumGradeMethodFieldUpdateOperationsInput | $Enums.GradeMethod
    passing_score?: IntFieldUpdateOperationsInput | number
    tickets?: testUpdateticketsInput | string[]
  }

  export type moduleCreateInput = {
    number: number
    name: string
    reference_image?: string | null
    time?: number
    questions?: questionCreateNestedManyWithoutModuleInput
    test: testCreateNestedOneWithoutModulesInput
  }

  export type moduleUncheckedCreateInput = {
    id?: number
    number: number
    name: string
    test_id: string
    reference_image?: string | null
    time?: number
    questions?: questionUncheckedCreateNestedManyWithoutModuleInput
  }

  export type moduleUpdateInput = {
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    reference_image?: NullableStringFieldUpdateOperationsInput | string | null
    time?: IntFieldUpdateOperationsInput | number
    questions?: questionUpdateManyWithoutModuleNestedInput
    test?: testUpdateOneRequiredWithoutModulesNestedInput
  }

  export type moduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    test_id?: StringFieldUpdateOperationsInput | string
    reference_image?: NullableStringFieldUpdateOperationsInput | string | null
    time?: IntFieldUpdateOperationsInput | number
    questions?: questionUncheckedUpdateManyWithoutModuleNestedInput
  }

  export type moduleCreateManyInput = {
    id?: number
    number: number
    name: string
    test_id: string
    reference_image?: string | null
    time?: number
  }

  export type moduleUpdateManyMutationInput = {
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    reference_image?: NullableStringFieldUpdateOperationsInput | string | null
    time?: IntFieldUpdateOperationsInput | number
  }

  export type moduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    test_id?: StringFieldUpdateOperationsInput | string
    reference_image?: NullableStringFieldUpdateOperationsInput | string | null
    time?: IntFieldUpdateOperationsInput | number
  }

  export type questionCreateInput = {
    number: number
    question: string
    context?: string | null
    points: number
    choices?: questionCreatechoicesInput | string[]
    answer: number
    explanation?: string | null
    module: moduleCreateNestedOneWithoutQuestionsInput
  }

  export type questionUncheckedCreateInput = {
    number: number
    question: string
    context?: string | null
    points: number
    choices?: questionCreatechoicesInput | string[]
    answer: number
    explanation?: string | null
    module_id: number
  }

  export type questionUpdateInput = {
    number?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    context?: NullableStringFieldUpdateOperationsInput | string | null
    points?: FloatFieldUpdateOperationsInput | number
    choices?: questionUpdatechoicesInput | string[]
    answer?: IntFieldUpdateOperationsInput | number
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    module?: moduleUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type questionUncheckedUpdateInput = {
    number?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    context?: NullableStringFieldUpdateOperationsInput | string | null
    points?: FloatFieldUpdateOperationsInput | number
    choices?: questionUpdatechoicesInput | string[]
    answer?: IntFieldUpdateOperationsInput | number
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    module_id?: IntFieldUpdateOperationsInput | number
  }

  export type questionCreateManyInput = {
    number: number
    question: string
    context?: string | null
    points: number
    choices?: questionCreatechoicesInput | string[]
    answer: number
    explanation?: string | null
    module_id: number
  }

  export type questionUpdateManyMutationInput = {
    number?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    context?: NullableStringFieldUpdateOperationsInput | string | null
    points?: FloatFieldUpdateOperationsInput | number
    choices?: questionUpdatechoicesInput | string[]
    answer?: IntFieldUpdateOperationsInput | number
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type questionUncheckedUpdateManyInput = {
    number?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    context?: NullableStringFieldUpdateOperationsInput | string | null
    points?: FloatFieldUpdateOperationsInput | number
    choices?: questionUpdatechoicesInput | string[]
    answer?: IntFieldUpdateOperationsInput | number
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    module_id?: IntFieldUpdateOperationsInput | number
  }

  export type answerCreateInput = {
    ticket: string
    answers?: answerCreateanswersInput | number[]
    current_module?: number
    start_module_at?: Date | string
    module_answers_received?: boolean
    invalid?: boolean
    finished?: boolean
    test: testCreateNestedOneWithoutAnswersInput
  }

  export type answerUncheckedCreateInput = {
    ticket: string
    answers?: answerCreateanswersInput | number[]
    current_module?: number
    start_module_at?: Date | string
    module_answers_received?: boolean
    invalid?: boolean
    finished?: boolean
    test_id: string
  }

  export type answerUpdateInput = {
    ticket?: StringFieldUpdateOperationsInput | string
    answers?: answerUpdateanswersInput | number[]
    current_module?: IntFieldUpdateOperationsInput | number
    start_module_at?: DateTimeFieldUpdateOperationsInput | Date | string
    module_answers_received?: BoolFieldUpdateOperationsInput | boolean
    invalid?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
    test?: testUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type answerUncheckedUpdateInput = {
    ticket?: StringFieldUpdateOperationsInput | string
    answers?: answerUpdateanswersInput | number[]
    current_module?: IntFieldUpdateOperationsInput | number
    start_module_at?: DateTimeFieldUpdateOperationsInput | Date | string
    module_answers_received?: BoolFieldUpdateOperationsInput | boolean
    invalid?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
    test_id?: StringFieldUpdateOperationsInput | string
  }

  export type answerCreateManyInput = {
    ticket: string
    answers?: answerCreateanswersInput | number[]
    current_module?: number
    start_module_at?: Date | string
    module_answers_received?: boolean
    invalid?: boolean
    finished?: boolean
    test_id: string
  }

  export type answerUpdateManyMutationInput = {
    ticket?: StringFieldUpdateOperationsInput | string
    answers?: answerUpdateanswersInput | number[]
    current_module?: IntFieldUpdateOperationsInput | number
    start_module_at?: DateTimeFieldUpdateOperationsInput | Date | string
    module_answers_received?: BoolFieldUpdateOperationsInput | boolean
    invalid?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type answerUncheckedUpdateManyInput = {
    ticket?: StringFieldUpdateOperationsInput | string
    answers?: answerUpdateanswersInput | number[]
    current_module?: IntFieldUpdateOperationsInput | number
    start_module_at?: DateTimeFieldUpdateOperationsInput | Date | string
    module_answers_received?: BoolFieldUpdateOperationsInput | boolean
    invalid?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
    test_id?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumReviewPermissionFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewPermission | EnumReviewPermissionFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewPermission[] | ListEnumReviewPermissionFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReviewPermission[] | ListEnumReviewPermissionFieldRefInput<$PrismaModel>
    not?: NestedEnumReviewPermissionFilter<$PrismaModel> | $Enums.ReviewPermission
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumGradeMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.GradeMethod | EnumGradeMethodFieldRefInput<$PrismaModel>
    in?: $Enums.GradeMethod[] | ListEnumGradeMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.GradeMethod[] | ListEnumGradeMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumGradeMethodFilter<$PrismaModel> | $Enums.GradeMethod
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ModuleListRelationFilter = {
    every?: moduleWhereInput
    some?: moduleWhereInput
    none?: moduleWhereInput
  }

  export type AnswerListRelationFilter = {
    every?: answerWhereInput
    some?: answerWhereInput
    none?: answerWhereInput
  }

  export type moduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type answerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type testCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    review_permission?: SortOrder
    show_point_weight?: SortOrder
    review_point_weight?: SortOrder
    allow_early_continue?: SortOrder
    results_available?: SortOrder
    grade_method?: SortOrder
    passing_score?: SortOrder
    tickets?: SortOrder
  }

  export type testAvgOrderByAggregateInput = {
    passing_score?: SortOrder
  }

  export type testMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    review_permission?: SortOrder
    show_point_weight?: SortOrder
    review_point_weight?: SortOrder
    allow_early_continue?: SortOrder
    results_available?: SortOrder
    grade_method?: SortOrder
    passing_score?: SortOrder
  }

  export type testMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    review_permission?: SortOrder
    show_point_weight?: SortOrder
    review_point_weight?: SortOrder
    allow_early_continue?: SortOrder
    results_available?: SortOrder
    grade_method?: SortOrder
    passing_score?: SortOrder
  }

  export type testSumOrderByAggregateInput = {
    passing_score?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumReviewPermissionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewPermission | EnumReviewPermissionFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewPermission[] | ListEnumReviewPermissionFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReviewPermission[] | ListEnumReviewPermissionFieldRefInput<$PrismaModel>
    not?: NestedEnumReviewPermissionWithAggregatesFilter<$PrismaModel> | $Enums.ReviewPermission
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReviewPermissionFilter<$PrismaModel>
    _max?: NestedEnumReviewPermissionFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumGradeMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GradeMethod | EnumGradeMethodFieldRefInput<$PrismaModel>
    in?: $Enums.GradeMethod[] | ListEnumGradeMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.GradeMethod[] | ListEnumGradeMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumGradeMethodWithAggregatesFilter<$PrismaModel> | $Enums.GradeMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGradeMethodFilter<$PrismaModel>
    _max?: NestedEnumGradeMethodFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type QuestionListRelationFilter = {
    every?: questionWhereInput
    some?: questionWhereInput
    none?: questionWhereInput
  }

  export type TestRelationFilter = {
    is?: testWhereInput
    isNot?: testWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type questionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type moduleNameTest_idCompoundUniqueInput = {
    name: string
    test_id: string
  }

  export type moduleNumberTest_idCompoundUniqueInput = {
    number: number
    test_id: string
  }

  export type moduleCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
    test_id?: SortOrder
    reference_image?: SortOrder
    time?: SortOrder
  }

  export type moduleAvgOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    time?: SortOrder
  }

  export type moduleMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
    test_id?: SortOrder
    reference_image?: SortOrder
    time?: SortOrder
  }

  export type moduleMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    name?: SortOrder
    test_id?: SortOrder
    reference_image?: SortOrder
    time?: SortOrder
  }

  export type moduleSumOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    time?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ModuleRelationFilter = {
    is?: moduleWhereInput
    isNot?: moduleWhereInput
  }

  export type questionNumberModule_idCompoundUniqueInput = {
    number: number
    module_id: number
  }

  export type questionCountOrderByAggregateInput = {
    number?: SortOrder
    question?: SortOrder
    context?: SortOrder
    points?: SortOrder
    choices?: SortOrder
    answer?: SortOrder
    explanation?: SortOrder
    module_id?: SortOrder
  }

  export type questionAvgOrderByAggregateInput = {
    number?: SortOrder
    points?: SortOrder
    answer?: SortOrder
    module_id?: SortOrder
  }

  export type questionMaxOrderByAggregateInput = {
    number?: SortOrder
    question?: SortOrder
    context?: SortOrder
    points?: SortOrder
    answer?: SortOrder
    explanation?: SortOrder
    module_id?: SortOrder
  }

  export type questionMinOrderByAggregateInput = {
    number?: SortOrder
    question?: SortOrder
    context?: SortOrder
    points?: SortOrder
    answer?: SortOrder
    explanation?: SortOrder
    module_id?: SortOrder
  }

  export type questionSumOrderByAggregateInput = {
    number?: SortOrder
    points?: SortOrder
    answer?: SortOrder
    module_id?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type answerTicketTest_idCompoundUniqueInput = {
    ticket: string
    test_id: string
  }

  export type answerCountOrderByAggregateInput = {
    ticket?: SortOrder
    answers?: SortOrder
    current_module?: SortOrder
    start_module_at?: SortOrder
    module_answers_received?: SortOrder
    invalid?: SortOrder
    finished?: SortOrder
    test_id?: SortOrder
  }

  export type answerAvgOrderByAggregateInput = {
    answers?: SortOrder
    current_module?: SortOrder
  }

  export type answerMaxOrderByAggregateInput = {
    ticket?: SortOrder
    current_module?: SortOrder
    start_module_at?: SortOrder
    module_answers_received?: SortOrder
    invalid?: SortOrder
    finished?: SortOrder
    test_id?: SortOrder
  }

  export type answerMinOrderByAggregateInput = {
    ticket?: SortOrder
    current_module?: SortOrder
    start_module_at?: SortOrder
    module_answers_received?: SortOrder
    invalid?: SortOrder
    finished?: SortOrder
    test_id?: SortOrder
  }

  export type answerSumOrderByAggregateInput = {
    answers?: SortOrder
    current_module?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type testCreateticketsInput = {
    set: string[]
  }

  export type moduleCreateNestedManyWithoutTestInput = {
    create?: XOR<moduleCreateWithoutTestInput, moduleUncheckedCreateWithoutTestInput> | moduleCreateWithoutTestInput[] | moduleUncheckedCreateWithoutTestInput[]
    connectOrCreate?: moduleCreateOrConnectWithoutTestInput | moduleCreateOrConnectWithoutTestInput[]
    createMany?: moduleCreateManyTestInputEnvelope
    connect?: moduleWhereUniqueInput | moduleWhereUniqueInput[]
  }

  export type answerCreateNestedManyWithoutTestInput = {
    create?: XOR<answerCreateWithoutTestInput, answerUncheckedCreateWithoutTestInput> | answerCreateWithoutTestInput[] | answerUncheckedCreateWithoutTestInput[]
    connectOrCreate?: answerCreateOrConnectWithoutTestInput | answerCreateOrConnectWithoutTestInput[]
    createMany?: answerCreateManyTestInputEnvelope
    connect?: answerWhereUniqueInput | answerWhereUniqueInput[]
  }

  export type moduleUncheckedCreateNestedManyWithoutTestInput = {
    create?: XOR<moduleCreateWithoutTestInput, moduleUncheckedCreateWithoutTestInput> | moduleCreateWithoutTestInput[] | moduleUncheckedCreateWithoutTestInput[]
    connectOrCreate?: moduleCreateOrConnectWithoutTestInput | moduleCreateOrConnectWithoutTestInput[]
    createMany?: moduleCreateManyTestInputEnvelope
    connect?: moduleWhereUniqueInput | moduleWhereUniqueInput[]
  }

  export type answerUncheckedCreateNestedManyWithoutTestInput = {
    create?: XOR<answerCreateWithoutTestInput, answerUncheckedCreateWithoutTestInput> | answerCreateWithoutTestInput[] | answerUncheckedCreateWithoutTestInput[]
    connectOrCreate?: answerCreateOrConnectWithoutTestInput | answerCreateOrConnectWithoutTestInput[]
    createMany?: answerCreateManyTestInputEnvelope
    connect?: answerWhereUniqueInput | answerWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumReviewPermissionFieldUpdateOperationsInput = {
    set?: $Enums.ReviewPermission
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumGradeMethodFieldUpdateOperationsInput = {
    set?: $Enums.GradeMethod
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type testUpdateticketsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type moduleUpdateManyWithoutTestNestedInput = {
    create?: XOR<moduleCreateWithoutTestInput, moduleUncheckedCreateWithoutTestInput> | moduleCreateWithoutTestInput[] | moduleUncheckedCreateWithoutTestInput[]
    connectOrCreate?: moduleCreateOrConnectWithoutTestInput | moduleCreateOrConnectWithoutTestInput[]
    upsert?: moduleUpsertWithWhereUniqueWithoutTestInput | moduleUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: moduleCreateManyTestInputEnvelope
    set?: moduleWhereUniqueInput | moduleWhereUniqueInput[]
    disconnect?: moduleWhereUniqueInput | moduleWhereUniqueInput[]
    delete?: moduleWhereUniqueInput | moduleWhereUniqueInput[]
    connect?: moduleWhereUniqueInput | moduleWhereUniqueInput[]
    update?: moduleUpdateWithWhereUniqueWithoutTestInput | moduleUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: moduleUpdateManyWithWhereWithoutTestInput | moduleUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: moduleScalarWhereInput | moduleScalarWhereInput[]
  }

  export type answerUpdateManyWithoutTestNestedInput = {
    create?: XOR<answerCreateWithoutTestInput, answerUncheckedCreateWithoutTestInput> | answerCreateWithoutTestInput[] | answerUncheckedCreateWithoutTestInput[]
    connectOrCreate?: answerCreateOrConnectWithoutTestInput | answerCreateOrConnectWithoutTestInput[]
    upsert?: answerUpsertWithWhereUniqueWithoutTestInput | answerUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: answerCreateManyTestInputEnvelope
    set?: answerWhereUniqueInput | answerWhereUniqueInput[]
    disconnect?: answerWhereUniqueInput | answerWhereUniqueInput[]
    delete?: answerWhereUniqueInput | answerWhereUniqueInput[]
    connect?: answerWhereUniqueInput | answerWhereUniqueInput[]
    update?: answerUpdateWithWhereUniqueWithoutTestInput | answerUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: answerUpdateManyWithWhereWithoutTestInput | answerUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: answerScalarWhereInput | answerScalarWhereInput[]
  }

  export type moduleUncheckedUpdateManyWithoutTestNestedInput = {
    create?: XOR<moduleCreateWithoutTestInput, moduleUncheckedCreateWithoutTestInput> | moduleCreateWithoutTestInput[] | moduleUncheckedCreateWithoutTestInput[]
    connectOrCreate?: moduleCreateOrConnectWithoutTestInput | moduleCreateOrConnectWithoutTestInput[]
    upsert?: moduleUpsertWithWhereUniqueWithoutTestInput | moduleUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: moduleCreateManyTestInputEnvelope
    set?: moduleWhereUniqueInput | moduleWhereUniqueInput[]
    disconnect?: moduleWhereUniqueInput | moduleWhereUniqueInput[]
    delete?: moduleWhereUniqueInput | moduleWhereUniqueInput[]
    connect?: moduleWhereUniqueInput | moduleWhereUniqueInput[]
    update?: moduleUpdateWithWhereUniqueWithoutTestInput | moduleUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: moduleUpdateManyWithWhereWithoutTestInput | moduleUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: moduleScalarWhereInput | moduleScalarWhereInput[]
  }

  export type answerUncheckedUpdateManyWithoutTestNestedInput = {
    create?: XOR<answerCreateWithoutTestInput, answerUncheckedCreateWithoutTestInput> | answerCreateWithoutTestInput[] | answerUncheckedCreateWithoutTestInput[]
    connectOrCreate?: answerCreateOrConnectWithoutTestInput | answerCreateOrConnectWithoutTestInput[]
    upsert?: answerUpsertWithWhereUniqueWithoutTestInput | answerUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: answerCreateManyTestInputEnvelope
    set?: answerWhereUniqueInput | answerWhereUniqueInput[]
    disconnect?: answerWhereUniqueInput | answerWhereUniqueInput[]
    delete?: answerWhereUniqueInput | answerWhereUniqueInput[]
    connect?: answerWhereUniqueInput | answerWhereUniqueInput[]
    update?: answerUpdateWithWhereUniqueWithoutTestInput | answerUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: answerUpdateManyWithWhereWithoutTestInput | answerUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: answerScalarWhereInput | answerScalarWhereInput[]
  }

  export type questionCreateNestedManyWithoutModuleInput = {
    create?: XOR<questionCreateWithoutModuleInput, questionUncheckedCreateWithoutModuleInput> | questionCreateWithoutModuleInput[] | questionUncheckedCreateWithoutModuleInput[]
    connectOrCreate?: questionCreateOrConnectWithoutModuleInput | questionCreateOrConnectWithoutModuleInput[]
    createMany?: questionCreateManyModuleInputEnvelope
    connect?: questionWhereUniqueInput | questionWhereUniqueInput[]
  }

  export type testCreateNestedOneWithoutModulesInput = {
    create?: XOR<testCreateWithoutModulesInput, testUncheckedCreateWithoutModulesInput>
    connectOrCreate?: testCreateOrConnectWithoutModulesInput
    connect?: testWhereUniqueInput
  }

  export type questionUncheckedCreateNestedManyWithoutModuleInput = {
    create?: XOR<questionCreateWithoutModuleInput, questionUncheckedCreateWithoutModuleInput> | questionCreateWithoutModuleInput[] | questionUncheckedCreateWithoutModuleInput[]
    connectOrCreate?: questionCreateOrConnectWithoutModuleInput | questionCreateOrConnectWithoutModuleInput[]
    createMany?: questionCreateManyModuleInputEnvelope
    connect?: questionWhereUniqueInput | questionWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type questionUpdateManyWithoutModuleNestedInput = {
    create?: XOR<questionCreateWithoutModuleInput, questionUncheckedCreateWithoutModuleInput> | questionCreateWithoutModuleInput[] | questionUncheckedCreateWithoutModuleInput[]
    connectOrCreate?: questionCreateOrConnectWithoutModuleInput | questionCreateOrConnectWithoutModuleInput[]
    upsert?: questionUpsertWithWhereUniqueWithoutModuleInput | questionUpsertWithWhereUniqueWithoutModuleInput[]
    createMany?: questionCreateManyModuleInputEnvelope
    set?: questionWhereUniqueInput | questionWhereUniqueInput[]
    disconnect?: questionWhereUniqueInput | questionWhereUniqueInput[]
    delete?: questionWhereUniqueInput | questionWhereUniqueInput[]
    connect?: questionWhereUniqueInput | questionWhereUniqueInput[]
    update?: questionUpdateWithWhereUniqueWithoutModuleInput | questionUpdateWithWhereUniqueWithoutModuleInput[]
    updateMany?: questionUpdateManyWithWhereWithoutModuleInput | questionUpdateManyWithWhereWithoutModuleInput[]
    deleteMany?: questionScalarWhereInput | questionScalarWhereInput[]
  }

  export type testUpdateOneRequiredWithoutModulesNestedInput = {
    create?: XOR<testCreateWithoutModulesInput, testUncheckedCreateWithoutModulesInput>
    connectOrCreate?: testCreateOrConnectWithoutModulesInput
    upsert?: testUpsertWithoutModulesInput
    connect?: testWhereUniqueInput
    update?: XOR<XOR<testUpdateToOneWithWhereWithoutModulesInput, testUpdateWithoutModulesInput>, testUncheckedUpdateWithoutModulesInput>
  }

  export type questionUncheckedUpdateManyWithoutModuleNestedInput = {
    create?: XOR<questionCreateWithoutModuleInput, questionUncheckedCreateWithoutModuleInput> | questionCreateWithoutModuleInput[] | questionUncheckedCreateWithoutModuleInput[]
    connectOrCreate?: questionCreateOrConnectWithoutModuleInput | questionCreateOrConnectWithoutModuleInput[]
    upsert?: questionUpsertWithWhereUniqueWithoutModuleInput | questionUpsertWithWhereUniqueWithoutModuleInput[]
    createMany?: questionCreateManyModuleInputEnvelope
    set?: questionWhereUniqueInput | questionWhereUniqueInput[]
    disconnect?: questionWhereUniqueInput | questionWhereUniqueInput[]
    delete?: questionWhereUniqueInput | questionWhereUniqueInput[]
    connect?: questionWhereUniqueInput | questionWhereUniqueInput[]
    update?: questionUpdateWithWhereUniqueWithoutModuleInput | questionUpdateWithWhereUniqueWithoutModuleInput[]
    updateMany?: questionUpdateManyWithWhereWithoutModuleInput | questionUpdateManyWithWhereWithoutModuleInput[]
    deleteMany?: questionScalarWhereInput | questionScalarWhereInput[]
  }

  export type questionCreatechoicesInput = {
    set: string[]
  }

  export type moduleCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<moduleCreateWithoutQuestionsInput, moduleUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: moduleCreateOrConnectWithoutQuestionsInput
    connect?: moduleWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type questionUpdatechoicesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type moduleUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<moduleCreateWithoutQuestionsInput, moduleUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: moduleCreateOrConnectWithoutQuestionsInput
    upsert?: moduleUpsertWithoutQuestionsInput
    connect?: moduleWhereUniqueInput
    update?: XOR<XOR<moduleUpdateToOneWithWhereWithoutQuestionsInput, moduleUpdateWithoutQuestionsInput>, moduleUncheckedUpdateWithoutQuestionsInput>
  }

  export type answerCreateanswersInput = {
    set: number[]
  }

  export type testCreateNestedOneWithoutAnswersInput = {
    create?: XOR<testCreateWithoutAnswersInput, testUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: testCreateOrConnectWithoutAnswersInput
    connect?: testWhereUniqueInput
  }

  export type answerUpdateanswersInput = {
    set?: number[]
    push?: number | number[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type testUpdateOneRequiredWithoutAnswersNestedInput = {
    create?: XOR<testCreateWithoutAnswersInput, testUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: testCreateOrConnectWithoutAnswersInput
    upsert?: testUpsertWithoutAnswersInput
    connect?: testWhereUniqueInput
    update?: XOR<XOR<testUpdateToOneWithWhereWithoutAnswersInput, testUpdateWithoutAnswersInput>, testUncheckedUpdateWithoutAnswersInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumReviewPermissionFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewPermission | EnumReviewPermissionFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewPermission[] | ListEnumReviewPermissionFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReviewPermission[] | ListEnumReviewPermissionFieldRefInput<$PrismaModel>
    not?: NestedEnumReviewPermissionFilter<$PrismaModel> | $Enums.ReviewPermission
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumGradeMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.GradeMethod | EnumGradeMethodFieldRefInput<$PrismaModel>
    in?: $Enums.GradeMethod[] | ListEnumGradeMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.GradeMethod[] | ListEnumGradeMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumGradeMethodFilter<$PrismaModel> | $Enums.GradeMethod
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumReviewPermissionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewPermission | EnumReviewPermissionFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewPermission[] | ListEnumReviewPermissionFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReviewPermission[] | ListEnumReviewPermissionFieldRefInput<$PrismaModel>
    not?: NestedEnumReviewPermissionWithAggregatesFilter<$PrismaModel> | $Enums.ReviewPermission
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReviewPermissionFilter<$PrismaModel>
    _max?: NestedEnumReviewPermissionFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumGradeMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GradeMethod | EnumGradeMethodFieldRefInput<$PrismaModel>
    in?: $Enums.GradeMethod[] | ListEnumGradeMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.GradeMethod[] | ListEnumGradeMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumGradeMethodWithAggregatesFilter<$PrismaModel> | $Enums.GradeMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGradeMethodFilter<$PrismaModel>
    _max?: NestedEnumGradeMethodFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type moduleCreateWithoutTestInput = {
    number: number
    name: string
    reference_image?: string | null
    time?: number
    questions?: questionCreateNestedManyWithoutModuleInput
  }

  export type moduleUncheckedCreateWithoutTestInput = {
    id?: number
    number: number
    name: string
    reference_image?: string | null
    time?: number
    questions?: questionUncheckedCreateNestedManyWithoutModuleInput
  }

  export type moduleCreateOrConnectWithoutTestInput = {
    where: moduleWhereUniqueInput
    create: XOR<moduleCreateWithoutTestInput, moduleUncheckedCreateWithoutTestInput>
  }

  export type moduleCreateManyTestInputEnvelope = {
    data: moduleCreateManyTestInput | moduleCreateManyTestInput[]
    skipDuplicates?: boolean
  }

  export type answerCreateWithoutTestInput = {
    ticket: string
    answers?: answerCreateanswersInput | number[]
    current_module?: number
    start_module_at?: Date | string
    module_answers_received?: boolean
    invalid?: boolean
    finished?: boolean
  }

  export type answerUncheckedCreateWithoutTestInput = {
    ticket: string
    answers?: answerCreateanswersInput | number[]
    current_module?: number
    start_module_at?: Date | string
    module_answers_received?: boolean
    invalid?: boolean
    finished?: boolean
  }

  export type answerCreateOrConnectWithoutTestInput = {
    where: answerWhereUniqueInput
    create: XOR<answerCreateWithoutTestInput, answerUncheckedCreateWithoutTestInput>
  }

  export type answerCreateManyTestInputEnvelope = {
    data: answerCreateManyTestInput | answerCreateManyTestInput[]
    skipDuplicates?: boolean
  }

  export type moduleUpsertWithWhereUniqueWithoutTestInput = {
    where: moduleWhereUniqueInput
    update: XOR<moduleUpdateWithoutTestInput, moduleUncheckedUpdateWithoutTestInput>
    create: XOR<moduleCreateWithoutTestInput, moduleUncheckedCreateWithoutTestInput>
  }

  export type moduleUpdateWithWhereUniqueWithoutTestInput = {
    where: moduleWhereUniqueInput
    data: XOR<moduleUpdateWithoutTestInput, moduleUncheckedUpdateWithoutTestInput>
  }

  export type moduleUpdateManyWithWhereWithoutTestInput = {
    where: moduleScalarWhereInput
    data: XOR<moduleUpdateManyMutationInput, moduleUncheckedUpdateManyWithoutTestInput>
  }

  export type moduleScalarWhereInput = {
    AND?: moduleScalarWhereInput | moduleScalarWhereInput[]
    OR?: moduleScalarWhereInput[]
    NOT?: moduleScalarWhereInput | moduleScalarWhereInput[]
    id?: IntFilter<"module"> | number
    number?: IntFilter<"module"> | number
    name?: StringFilter<"module"> | string
    test_id?: StringFilter<"module"> | string
    reference_image?: StringNullableFilter<"module"> | string | null
    time?: IntFilter<"module"> | number
  }

  export type answerUpsertWithWhereUniqueWithoutTestInput = {
    where: answerWhereUniqueInput
    update: XOR<answerUpdateWithoutTestInput, answerUncheckedUpdateWithoutTestInput>
    create: XOR<answerCreateWithoutTestInput, answerUncheckedCreateWithoutTestInput>
  }

  export type answerUpdateWithWhereUniqueWithoutTestInput = {
    where: answerWhereUniqueInput
    data: XOR<answerUpdateWithoutTestInput, answerUncheckedUpdateWithoutTestInput>
  }

  export type answerUpdateManyWithWhereWithoutTestInput = {
    where: answerScalarWhereInput
    data: XOR<answerUpdateManyMutationInput, answerUncheckedUpdateManyWithoutTestInput>
  }

  export type answerScalarWhereInput = {
    AND?: answerScalarWhereInput | answerScalarWhereInput[]
    OR?: answerScalarWhereInput[]
    NOT?: answerScalarWhereInput | answerScalarWhereInput[]
    ticket?: StringFilter<"answer"> | string
    answers?: IntNullableListFilter<"answer">
    current_module?: IntFilter<"answer"> | number
    start_module_at?: DateTimeFilter<"answer"> | Date | string
    module_answers_received?: BoolFilter<"answer"> | boolean
    invalid?: BoolFilter<"answer"> | boolean
    finished?: BoolFilter<"answer"> | boolean
    test_id?: StringFilter<"answer"> | string
  }

  export type questionCreateWithoutModuleInput = {
    number: number
    question: string
    context?: string | null
    points: number
    choices?: questionCreatechoicesInput | string[]
    answer: number
    explanation?: string | null
  }

  export type questionUncheckedCreateWithoutModuleInput = {
    number: number
    question: string
    context?: string | null
    points: number
    choices?: questionCreatechoicesInput | string[]
    answer: number
    explanation?: string | null
  }

  export type questionCreateOrConnectWithoutModuleInput = {
    where: questionWhereUniqueInput
    create: XOR<questionCreateWithoutModuleInput, questionUncheckedCreateWithoutModuleInput>
  }

  export type questionCreateManyModuleInputEnvelope = {
    data: questionCreateManyModuleInput | questionCreateManyModuleInput[]
    skipDuplicates?: boolean
  }

  export type testCreateWithoutModulesInput = {
    id: string
    name: string
    description: string
    review_permission?: $Enums.ReviewPermission
    show_point_weight?: boolean
    review_point_weight?: boolean
    allow_early_continue?: boolean
    results_available?: boolean
    grade_method?: $Enums.GradeMethod
    passing_score?: number
    tickets?: testCreateticketsInput | string[]
    answers?: answerCreateNestedManyWithoutTestInput
  }

  export type testUncheckedCreateWithoutModulesInput = {
    id: string
    name: string
    description: string
    review_permission?: $Enums.ReviewPermission
    show_point_weight?: boolean
    review_point_weight?: boolean
    allow_early_continue?: boolean
    results_available?: boolean
    grade_method?: $Enums.GradeMethod
    passing_score?: number
    tickets?: testCreateticketsInput | string[]
    answers?: answerUncheckedCreateNestedManyWithoutTestInput
  }

  export type testCreateOrConnectWithoutModulesInput = {
    where: testWhereUniqueInput
    create: XOR<testCreateWithoutModulesInput, testUncheckedCreateWithoutModulesInput>
  }

  export type questionUpsertWithWhereUniqueWithoutModuleInput = {
    where: questionWhereUniqueInput
    update: XOR<questionUpdateWithoutModuleInput, questionUncheckedUpdateWithoutModuleInput>
    create: XOR<questionCreateWithoutModuleInput, questionUncheckedCreateWithoutModuleInput>
  }

  export type questionUpdateWithWhereUniqueWithoutModuleInput = {
    where: questionWhereUniqueInput
    data: XOR<questionUpdateWithoutModuleInput, questionUncheckedUpdateWithoutModuleInput>
  }

  export type questionUpdateManyWithWhereWithoutModuleInput = {
    where: questionScalarWhereInput
    data: XOR<questionUpdateManyMutationInput, questionUncheckedUpdateManyWithoutModuleInput>
  }

  export type questionScalarWhereInput = {
    AND?: questionScalarWhereInput | questionScalarWhereInput[]
    OR?: questionScalarWhereInput[]
    NOT?: questionScalarWhereInput | questionScalarWhereInput[]
    number?: IntFilter<"question"> | number
    question?: StringFilter<"question"> | string
    context?: StringNullableFilter<"question"> | string | null
    points?: FloatFilter<"question"> | number
    choices?: StringNullableListFilter<"question">
    answer?: IntFilter<"question"> | number
    explanation?: StringNullableFilter<"question"> | string | null
    module_id?: IntFilter<"question"> | number
  }

  export type testUpsertWithoutModulesInput = {
    update: XOR<testUpdateWithoutModulesInput, testUncheckedUpdateWithoutModulesInput>
    create: XOR<testCreateWithoutModulesInput, testUncheckedCreateWithoutModulesInput>
    where?: testWhereInput
  }

  export type testUpdateToOneWithWhereWithoutModulesInput = {
    where?: testWhereInput
    data: XOR<testUpdateWithoutModulesInput, testUncheckedUpdateWithoutModulesInput>
  }

  export type testUpdateWithoutModulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    review_permission?: EnumReviewPermissionFieldUpdateOperationsInput | $Enums.ReviewPermission
    show_point_weight?: BoolFieldUpdateOperationsInput | boolean
    review_point_weight?: BoolFieldUpdateOperationsInput | boolean
    allow_early_continue?: BoolFieldUpdateOperationsInput | boolean
    results_available?: BoolFieldUpdateOperationsInput | boolean
    grade_method?: EnumGradeMethodFieldUpdateOperationsInput | $Enums.GradeMethod
    passing_score?: IntFieldUpdateOperationsInput | number
    tickets?: testUpdateticketsInput | string[]
    answers?: answerUpdateManyWithoutTestNestedInput
  }

  export type testUncheckedUpdateWithoutModulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    review_permission?: EnumReviewPermissionFieldUpdateOperationsInput | $Enums.ReviewPermission
    show_point_weight?: BoolFieldUpdateOperationsInput | boolean
    review_point_weight?: BoolFieldUpdateOperationsInput | boolean
    allow_early_continue?: BoolFieldUpdateOperationsInput | boolean
    results_available?: BoolFieldUpdateOperationsInput | boolean
    grade_method?: EnumGradeMethodFieldUpdateOperationsInput | $Enums.GradeMethod
    passing_score?: IntFieldUpdateOperationsInput | number
    tickets?: testUpdateticketsInput | string[]
    answers?: answerUncheckedUpdateManyWithoutTestNestedInput
  }

  export type moduleCreateWithoutQuestionsInput = {
    number: number
    name: string
    reference_image?: string | null
    time?: number
    test: testCreateNestedOneWithoutModulesInput
  }

  export type moduleUncheckedCreateWithoutQuestionsInput = {
    id?: number
    number: number
    name: string
    test_id: string
    reference_image?: string | null
    time?: number
  }

  export type moduleCreateOrConnectWithoutQuestionsInput = {
    where: moduleWhereUniqueInput
    create: XOR<moduleCreateWithoutQuestionsInput, moduleUncheckedCreateWithoutQuestionsInput>
  }

  export type moduleUpsertWithoutQuestionsInput = {
    update: XOR<moduleUpdateWithoutQuestionsInput, moduleUncheckedUpdateWithoutQuestionsInput>
    create: XOR<moduleCreateWithoutQuestionsInput, moduleUncheckedCreateWithoutQuestionsInput>
    where?: moduleWhereInput
  }

  export type moduleUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: moduleWhereInput
    data: XOR<moduleUpdateWithoutQuestionsInput, moduleUncheckedUpdateWithoutQuestionsInput>
  }

  export type moduleUpdateWithoutQuestionsInput = {
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    reference_image?: NullableStringFieldUpdateOperationsInput | string | null
    time?: IntFieldUpdateOperationsInput | number
    test?: testUpdateOneRequiredWithoutModulesNestedInput
  }

  export type moduleUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    test_id?: StringFieldUpdateOperationsInput | string
    reference_image?: NullableStringFieldUpdateOperationsInput | string | null
    time?: IntFieldUpdateOperationsInput | number
  }

  export type testCreateWithoutAnswersInput = {
    id: string
    name: string
    description: string
    review_permission?: $Enums.ReviewPermission
    show_point_weight?: boolean
    review_point_weight?: boolean
    allow_early_continue?: boolean
    results_available?: boolean
    grade_method?: $Enums.GradeMethod
    passing_score?: number
    tickets?: testCreateticketsInput | string[]
    modules?: moduleCreateNestedManyWithoutTestInput
  }

  export type testUncheckedCreateWithoutAnswersInput = {
    id: string
    name: string
    description: string
    review_permission?: $Enums.ReviewPermission
    show_point_weight?: boolean
    review_point_weight?: boolean
    allow_early_continue?: boolean
    results_available?: boolean
    grade_method?: $Enums.GradeMethod
    passing_score?: number
    tickets?: testCreateticketsInput | string[]
    modules?: moduleUncheckedCreateNestedManyWithoutTestInput
  }

  export type testCreateOrConnectWithoutAnswersInput = {
    where: testWhereUniqueInput
    create: XOR<testCreateWithoutAnswersInput, testUncheckedCreateWithoutAnswersInput>
  }

  export type testUpsertWithoutAnswersInput = {
    update: XOR<testUpdateWithoutAnswersInput, testUncheckedUpdateWithoutAnswersInput>
    create: XOR<testCreateWithoutAnswersInput, testUncheckedCreateWithoutAnswersInput>
    where?: testWhereInput
  }

  export type testUpdateToOneWithWhereWithoutAnswersInput = {
    where?: testWhereInput
    data: XOR<testUpdateWithoutAnswersInput, testUncheckedUpdateWithoutAnswersInput>
  }

  export type testUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    review_permission?: EnumReviewPermissionFieldUpdateOperationsInput | $Enums.ReviewPermission
    show_point_weight?: BoolFieldUpdateOperationsInput | boolean
    review_point_weight?: BoolFieldUpdateOperationsInput | boolean
    allow_early_continue?: BoolFieldUpdateOperationsInput | boolean
    results_available?: BoolFieldUpdateOperationsInput | boolean
    grade_method?: EnumGradeMethodFieldUpdateOperationsInput | $Enums.GradeMethod
    passing_score?: IntFieldUpdateOperationsInput | number
    tickets?: testUpdateticketsInput | string[]
    modules?: moduleUpdateManyWithoutTestNestedInput
  }

  export type testUncheckedUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    review_permission?: EnumReviewPermissionFieldUpdateOperationsInput | $Enums.ReviewPermission
    show_point_weight?: BoolFieldUpdateOperationsInput | boolean
    review_point_weight?: BoolFieldUpdateOperationsInput | boolean
    allow_early_continue?: BoolFieldUpdateOperationsInput | boolean
    results_available?: BoolFieldUpdateOperationsInput | boolean
    grade_method?: EnumGradeMethodFieldUpdateOperationsInput | $Enums.GradeMethod
    passing_score?: IntFieldUpdateOperationsInput | number
    tickets?: testUpdateticketsInput | string[]
    modules?: moduleUncheckedUpdateManyWithoutTestNestedInput
  }

  export type moduleCreateManyTestInput = {
    id?: number
    number: number
    name: string
    reference_image?: string | null
    time?: number
  }

  export type answerCreateManyTestInput = {
    ticket: string
    answers?: answerCreateanswersInput | number[]
    current_module?: number
    start_module_at?: Date | string
    module_answers_received?: boolean
    invalid?: boolean
    finished?: boolean
  }

  export type moduleUpdateWithoutTestInput = {
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    reference_image?: NullableStringFieldUpdateOperationsInput | string | null
    time?: IntFieldUpdateOperationsInput | number
    questions?: questionUpdateManyWithoutModuleNestedInput
  }

  export type moduleUncheckedUpdateWithoutTestInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    reference_image?: NullableStringFieldUpdateOperationsInput | string | null
    time?: IntFieldUpdateOperationsInput | number
    questions?: questionUncheckedUpdateManyWithoutModuleNestedInput
  }

  export type moduleUncheckedUpdateManyWithoutTestInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    reference_image?: NullableStringFieldUpdateOperationsInput | string | null
    time?: IntFieldUpdateOperationsInput | number
  }

  export type answerUpdateWithoutTestInput = {
    ticket?: StringFieldUpdateOperationsInput | string
    answers?: answerUpdateanswersInput | number[]
    current_module?: IntFieldUpdateOperationsInput | number
    start_module_at?: DateTimeFieldUpdateOperationsInput | Date | string
    module_answers_received?: BoolFieldUpdateOperationsInput | boolean
    invalid?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type answerUncheckedUpdateWithoutTestInput = {
    ticket?: StringFieldUpdateOperationsInput | string
    answers?: answerUpdateanswersInput | number[]
    current_module?: IntFieldUpdateOperationsInput | number
    start_module_at?: DateTimeFieldUpdateOperationsInput | Date | string
    module_answers_received?: BoolFieldUpdateOperationsInput | boolean
    invalid?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type answerUncheckedUpdateManyWithoutTestInput = {
    ticket?: StringFieldUpdateOperationsInput | string
    answers?: answerUpdateanswersInput | number[]
    current_module?: IntFieldUpdateOperationsInput | number
    start_module_at?: DateTimeFieldUpdateOperationsInput | Date | string
    module_answers_received?: BoolFieldUpdateOperationsInput | boolean
    invalid?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type questionCreateManyModuleInput = {
    number: number
    question: string
    context?: string | null
    points: number
    choices?: questionCreatechoicesInput | string[]
    answer: number
    explanation?: string | null
  }

  export type questionUpdateWithoutModuleInput = {
    number?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    context?: NullableStringFieldUpdateOperationsInput | string | null
    points?: FloatFieldUpdateOperationsInput | number
    choices?: questionUpdatechoicesInput | string[]
    answer?: IntFieldUpdateOperationsInput | number
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type questionUncheckedUpdateWithoutModuleInput = {
    number?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    context?: NullableStringFieldUpdateOperationsInput | string | null
    points?: FloatFieldUpdateOperationsInput | number
    choices?: questionUpdatechoicesInput | string[]
    answer?: IntFieldUpdateOperationsInput | number
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type questionUncheckedUpdateManyWithoutModuleInput = {
    number?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    context?: NullableStringFieldUpdateOperationsInput | string | null
    points?: FloatFieldUpdateOperationsInput | number
    choices?: questionUpdatechoicesInput | string[]
    answer?: IntFieldUpdateOperationsInput | number
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use TestCountOutputTypeDefaultArgs instead
     */
    export type TestCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TestCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ModuleCountOutputTypeDefaultArgs instead
     */
    export type ModuleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ModuleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use testDefaultArgs instead
     */
    export type testArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = testDefaultArgs<ExtArgs>
    /**
     * @deprecated Use moduleDefaultArgs instead
     */
    export type moduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = moduleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use questionDefaultArgs instead
     */
    export type questionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = questionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use answerDefaultArgs instead
     */
    export type answerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = answerDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}